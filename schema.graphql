schema {
  query: query_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""
columns and relationships of "glottolog_family"
"""
type glottolog_family {
  child_languages: Int
  id: bigint!
  level: String
  macro_area: String
  name: String
  sub_families: Int
  top_level_family: Int
}

"""
aggregated selection of "glottolog_family"
"""
type glottolog_family_aggregate {
  aggregate: glottolog_family_aggregate_fields
  nodes: [glottolog_family!]!
}

"""
aggregate fields of "glottolog_family"
"""
type glottolog_family_aggregate_fields {
  avg: glottolog_family_avg_fields
  count(columns: [glottolog_family_select_column!], distinct: Boolean): Int!
  max: glottolog_family_max_fields
  min: glottolog_family_min_fields
  stddev: glottolog_family_stddev_fields
  stddev_pop: glottolog_family_stddev_pop_fields
  stddev_samp: glottolog_family_stddev_samp_fields
  sum: glottolog_family_sum_fields
  var_pop: glottolog_family_var_pop_fields
  var_samp: glottolog_family_var_samp_fields
  variance: glottolog_family_variance_fields
}

"""aggregate avg on columns"""
type glottolog_family_avg_fields {
  child_languages: Float
  id: Float
  sub_families: Float
  top_level_family: Float
}

"""
Boolean expression to filter rows from the table "glottolog_family". All fields are combined with a logical 'AND'.
"""
input glottolog_family_bool_exp {
  _and: [glottolog_family_bool_exp!]
  _not: glottolog_family_bool_exp
  _or: [glottolog_family_bool_exp!]
  child_languages: Int_comparison_exp
  id: bigint_comparison_exp
  level: String_comparison_exp
  macro_area: String_comparison_exp
  name: String_comparison_exp
  sub_families: Int_comparison_exp
  top_level_family: Int_comparison_exp
}

"""aggregate max on columns"""
type glottolog_family_max_fields {
  child_languages: Int
  id: bigint
  level: String
  macro_area: String
  name: String
  sub_families: Int
  top_level_family: Int
}

"""aggregate min on columns"""
type glottolog_family_min_fields {
  child_languages: Int
  id: bigint
  level: String
  macro_area: String
  name: String
  sub_families: Int
  top_level_family: Int
}

"""Ordering options when selecting data from "glottolog_family"."""
input glottolog_family_order_by {
  child_languages: order_by
  id: order_by
  level: order_by
  macro_area: order_by
  name: order_by
  sub_families: order_by
  top_level_family: order_by
}

"""
select columns of table "glottolog_family"
"""
enum glottolog_family_select_column {
  """column name"""
  child_languages

  """column name"""
  id

  """column name"""
  level

  """column name"""
  macro_area

  """column name"""
  name

  """column name"""
  sub_families

  """column name"""
  top_level_family
}

"""aggregate stddev on columns"""
type glottolog_family_stddev_fields {
  child_languages: Float
  id: Float
  sub_families: Float
  top_level_family: Float
}

"""aggregate stddev_pop on columns"""
type glottolog_family_stddev_pop_fields {
  child_languages: Float
  id: Float
  sub_families: Float
  top_level_family: Float
}

"""aggregate stddev_samp on columns"""
type glottolog_family_stddev_samp_fields {
  child_languages: Float
  id: Float
  sub_families: Float
  top_level_family: Float
}

"""
Streaming cursor of the table "glottolog_family"
"""
input glottolog_family_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: glottolog_family_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input glottolog_family_stream_cursor_value_input {
  child_languages: Int
  id: bigint
  level: String
  macro_area: String
  name: String
  sub_families: Int
  top_level_family: Int
}

"""aggregate sum on columns"""
type glottolog_family_sum_fields {
  child_languages: Int
  id: bigint
  sub_families: Int
  top_level_family: Int
}

"""aggregate var_pop on columns"""
type glottolog_family_var_pop_fields {
  child_languages: Float
  id: Float
  sub_families: Float
  top_level_family: Float
}

"""aggregate var_samp on columns"""
type glottolog_family_var_samp_fields {
  child_languages: Float
  id: Float
  sub_families: Float
  top_level_family: Float
}

"""aggregate variance on columns"""
type glottolog_family_variance_fields {
  child_languages: Float
  id: Float
  sub_families: Float
  top_level_family: Float
}

"""
columns and relationships of "glottolog_language"
"""
type glottolog_language {
  child_dialects: Int
  glottocode: String
  id: bigint!
  iso_639_3: String
  latitude: String
  longitude: String
  macro_area: String
  name: String
  top_level_family: String
}

"""
aggregated selection of "glottolog_language"
"""
type glottolog_language_aggregate {
  aggregate: glottolog_language_aggregate_fields
  nodes: [glottolog_language!]!
}

"""
aggregate fields of "glottolog_language"
"""
type glottolog_language_aggregate_fields {
  avg: glottolog_language_avg_fields
  count(columns: [glottolog_language_select_column!], distinct: Boolean): Int!
  max: glottolog_language_max_fields
  min: glottolog_language_min_fields
  stddev: glottolog_language_stddev_fields
  stddev_pop: glottolog_language_stddev_pop_fields
  stddev_samp: glottolog_language_stddev_samp_fields
  sum: glottolog_language_sum_fields
  var_pop: glottolog_language_var_pop_fields
  var_samp: glottolog_language_var_samp_fields
  variance: glottolog_language_variance_fields
}

"""aggregate avg on columns"""
type glottolog_language_avg_fields {
  child_dialects: Float
  id: Float
}

"""
Boolean expression to filter rows from the table "glottolog_language". All fields are combined with a logical 'AND'.
"""
input glottolog_language_bool_exp {
  _and: [glottolog_language_bool_exp!]
  _not: glottolog_language_bool_exp
  _or: [glottolog_language_bool_exp!]
  child_dialects: Int_comparison_exp
  glottocode: String_comparison_exp
  id: bigint_comparison_exp
  iso_639_3: String_comparison_exp
  latitude: String_comparison_exp
  longitude: String_comparison_exp
  macro_area: String_comparison_exp
  name: String_comparison_exp
  top_level_family: String_comparison_exp
}

"""aggregate max on columns"""
type glottolog_language_max_fields {
  child_dialects: Int
  glottocode: String
  id: bigint
  iso_639_3: String
  latitude: String
  longitude: String
  macro_area: String
  name: String
  top_level_family: String
}

"""aggregate min on columns"""
type glottolog_language_min_fields {
  child_dialects: Int
  glottocode: String
  id: bigint
  iso_639_3: String
  latitude: String
  longitude: String
  macro_area: String
  name: String
  top_level_family: String
}

"""Ordering options when selecting data from "glottolog_language"."""
input glottolog_language_order_by {
  child_dialects: order_by
  glottocode: order_by
  id: order_by
  iso_639_3: order_by
  latitude: order_by
  longitude: order_by
  macro_area: order_by
  name: order_by
  top_level_family: order_by
}

"""
select columns of table "glottolog_language"
"""
enum glottolog_language_select_column {
  """column name"""
  child_dialects

  """column name"""
  glottocode

  """column name"""
  id

  """column name"""
  iso_639_3

  """column name"""
  latitude

  """column name"""
  longitude

  """column name"""
  macro_area

  """column name"""
  name

  """column name"""
  top_level_family
}

"""aggregate stddev on columns"""
type glottolog_language_stddev_fields {
  child_dialects: Float
  id: Float
}

"""aggregate stddev_pop on columns"""
type glottolog_language_stddev_pop_fields {
  child_dialects: Float
  id: Float
}

"""aggregate stddev_samp on columns"""
type glottolog_language_stddev_samp_fields {
  child_dialects: Float
  id: Float
}

"""
Streaming cursor of the table "glottolog_language"
"""
input glottolog_language_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: glottolog_language_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input glottolog_language_stream_cursor_value_input {
  child_dialects: Int
  glottocode: String
  id: bigint
  iso_639_3: String
  latitude: String
  longitude: String
  macro_area: String
  name: String
  top_level_family: String
}

"""aggregate sum on columns"""
type glottolog_language_sum_fields {
  child_dialects: Int
  id: bigint
}

"""aggregate var_pop on columns"""
type glottolog_language_var_pop_fields {
  child_dialects: Float
  id: Float
}

"""aggregate var_samp on columns"""
type glottolog_language_var_samp_fields {
  child_dialects: Float
  id: Float
}

"""aggregate variance on columns"""
type glottolog_language_variance_fields {
  child_dialects: Float
  id: Float
}

"""
columns and relationships of "gsec_listing_of_people_groups"
"""
type gsec_listing_of_people_groups {
  affinity_bloc: String
  audio_scripture: Boolean
  continent: String
  country: String
  country_of_origin: String
  dispersed: Boolean
  evangelical_engagement: Boolean
  fips: String
  fips_of_origin: String
  freedom_index: String
  genc: String
  global_status_of_evangelical_christianity: Int
  gospel_films: Boolean
  gospel_recording: Boolean
  government_restrictions_index: String
  id: bigint!
  imb_affinity_group: String
  jesus_film: Boolean
  language: String
  latitude: String
  longitude: String
  nomadic: Boolean
  nomadic_description: String
  nomadic_type: Int
  not_engaged_anywhere: String
  peid: bigint
  people_cluster: String
  people_group: String
  people_name: String
  physical_exertion: String
  population: bigint
  population_layer: String
  radio_broadcast: Boolean
  religion: String
  resources: Int
  rol: String
  rop1: String
  rop2: String
  rop3: Int
  social_hostilities_index: String
  spi: Int
  strategic_priority_index: String
  sub_continent: String
  the_hope: Boolean
  threat_level: String
  written_scripture: Boolean
}

"""
aggregated selection of "gsec_listing_of_people_groups"
"""
type gsec_listing_of_people_groups_aggregate {
  aggregate: gsec_listing_of_people_groups_aggregate_fields
  nodes: [gsec_listing_of_people_groups!]!
}

"""
aggregate fields of "gsec_listing_of_people_groups"
"""
type gsec_listing_of_people_groups_aggregate_fields {
  avg: gsec_listing_of_people_groups_avg_fields
  count(columns: [gsec_listing_of_people_groups_select_column!], distinct: Boolean): Int!
  max: gsec_listing_of_people_groups_max_fields
  min: gsec_listing_of_people_groups_min_fields
  stddev: gsec_listing_of_people_groups_stddev_fields
  stddev_pop: gsec_listing_of_people_groups_stddev_pop_fields
  stddev_samp: gsec_listing_of_people_groups_stddev_samp_fields
  sum: gsec_listing_of_people_groups_sum_fields
  var_pop: gsec_listing_of_people_groups_var_pop_fields
  var_samp: gsec_listing_of_people_groups_var_samp_fields
  variance: gsec_listing_of_people_groups_variance_fields
}

"""aggregate avg on columns"""
type gsec_listing_of_people_groups_avg_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""
Boolean expression to filter rows from the table "gsec_listing_of_people_groups". All fields are combined with a logical 'AND'.
"""
input gsec_listing_of_people_groups_bool_exp {
  _and: [gsec_listing_of_people_groups_bool_exp!]
  _not: gsec_listing_of_people_groups_bool_exp
  _or: [gsec_listing_of_people_groups_bool_exp!]
  affinity_bloc: String_comparison_exp
  audio_scripture: Boolean_comparison_exp
  continent: String_comparison_exp
  country: String_comparison_exp
  country_of_origin: String_comparison_exp
  dispersed: Boolean_comparison_exp
  evangelical_engagement: Boolean_comparison_exp
  fips: String_comparison_exp
  fips_of_origin: String_comparison_exp
  freedom_index: String_comparison_exp
  genc: String_comparison_exp
  global_status_of_evangelical_christianity: Int_comparison_exp
  gospel_films: Boolean_comparison_exp
  gospel_recording: Boolean_comparison_exp
  government_restrictions_index: String_comparison_exp
  id: bigint_comparison_exp
  imb_affinity_group: String_comparison_exp
  jesus_film: Boolean_comparison_exp
  language: String_comparison_exp
  latitude: String_comparison_exp
  longitude: String_comparison_exp
  nomadic: Boolean_comparison_exp
  nomadic_description: String_comparison_exp
  nomadic_type: Int_comparison_exp
  not_engaged_anywhere: String_comparison_exp
  peid: bigint_comparison_exp
  people_cluster: String_comparison_exp
  people_group: String_comparison_exp
  people_name: String_comparison_exp
  physical_exertion: String_comparison_exp
  population: bigint_comparison_exp
  population_layer: String_comparison_exp
  radio_broadcast: Boolean_comparison_exp
  religion: String_comparison_exp
  resources: Int_comparison_exp
  rol: String_comparison_exp
  rop1: String_comparison_exp
  rop2: String_comparison_exp
  rop3: Int_comparison_exp
  social_hostilities_index: String_comparison_exp
  spi: Int_comparison_exp
  strategic_priority_index: String_comparison_exp
  sub_continent: String_comparison_exp
  the_hope: Boolean_comparison_exp
  threat_level: String_comparison_exp
  written_scripture: Boolean_comparison_exp
}

"""aggregate max on columns"""
type gsec_listing_of_people_groups_max_fields {
  affinity_bloc: String
  continent: String
  country: String
  country_of_origin: String
  fips: String
  fips_of_origin: String
  freedom_index: String
  genc: String
  global_status_of_evangelical_christianity: Int
  government_restrictions_index: String
  id: bigint
  imb_affinity_group: String
  language: String
  latitude: String
  longitude: String
  nomadic_description: String
  nomadic_type: Int
  not_engaged_anywhere: String
  peid: bigint
  people_cluster: String
  people_group: String
  people_name: String
  physical_exertion: String
  population: bigint
  population_layer: String
  religion: String
  resources: Int
  rol: String
  rop1: String
  rop2: String
  rop3: Int
  social_hostilities_index: String
  spi: Int
  strategic_priority_index: String
  sub_continent: String
  threat_level: String
}

"""aggregate min on columns"""
type gsec_listing_of_people_groups_min_fields {
  affinity_bloc: String
  continent: String
  country: String
  country_of_origin: String
  fips: String
  fips_of_origin: String
  freedom_index: String
  genc: String
  global_status_of_evangelical_christianity: Int
  government_restrictions_index: String
  id: bigint
  imb_affinity_group: String
  language: String
  latitude: String
  longitude: String
  nomadic_description: String
  nomadic_type: Int
  not_engaged_anywhere: String
  peid: bigint
  people_cluster: String
  people_group: String
  people_name: String
  physical_exertion: String
  population: bigint
  population_layer: String
  religion: String
  resources: Int
  rol: String
  rop1: String
  rop2: String
  rop3: Int
  social_hostilities_index: String
  spi: Int
  strategic_priority_index: String
  sub_continent: String
  threat_level: String
}

"""
Ordering options when selecting data from "gsec_listing_of_people_groups".
"""
input gsec_listing_of_people_groups_order_by {
  affinity_bloc: order_by
  audio_scripture: order_by
  continent: order_by
  country: order_by
  country_of_origin: order_by
  dispersed: order_by
  evangelical_engagement: order_by
  fips: order_by
  fips_of_origin: order_by
  freedom_index: order_by
  genc: order_by
  global_status_of_evangelical_christianity: order_by
  gospel_films: order_by
  gospel_recording: order_by
  government_restrictions_index: order_by
  id: order_by
  imb_affinity_group: order_by
  jesus_film: order_by
  language: order_by
  latitude: order_by
  longitude: order_by
  nomadic: order_by
  nomadic_description: order_by
  nomadic_type: order_by
  not_engaged_anywhere: order_by
  peid: order_by
  people_cluster: order_by
  people_group: order_by
  people_name: order_by
  physical_exertion: order_by
  population: order_by
  population_layer: order_by
  radio_broadcast: order_by
  religion: order_by
  resources: order_by
  rol: order_by
  rop1: order_by
  rop2: order_by
  rop3: order_by
  social_hostilities_index: order_by
  spi: order_by
  strategic_priority_index: order_by
  sub_continent: order_by
  the_hope: order_by
  threat_level: order_by
  written_scripture: order_by
}

"""
select columns of table "gsec_listing_of_people_groups"
"""
enum gsec_listing_of_people_groups_select_column {
  """column name"""
  affinity_bloc

  """column name"""
  audio_scripture

  """column name"""
  continent

  """column name"""
  country

  """column name"""
  country_of_origin

  """column name"""
  dispersed

  """column name"""
  evangelical_engagement

  """column name"""
  fips

  """column name"""
  fips_of_origin

  """column name"""
  freedom_index

  """column name"""
  genc

  """column name"""
  global_status_of_evangelical_christianity

  """column name"""
  gospel_films

  """column name"""
  gospel_recording

  """column name"""
  government_restrictions_index

  """column name"""
  id

  """column name"""
  imb_affinity_group

  """column name"""
  jesus_film

  """column name"""
  language

  """column name"""
  latitude

  """column name"""
  longitude

  """column name"""
  nomadic

  """column name"""
  nomadic_description

  """column name"""
  nomadic_type

  """column name"""
  not_engaged_anywhere

  """column name"""
  peid

  """column name"""
  people_cluster

  """column name"""
  people_group

  """column name"""
  people_name

  """column name"""
  physical_exertion

  """column name"""
  population

  """column name"""
  population_layer

  """column name"""
  radio_broadcast

  """column name"""
  religion

  """column name"""
  resources

  """column name"""
  rol

  """column name"""
  rop1

  """column name"""
  rop2

  """column name"""
  rop3

  """column name"""
  social_hostilities_index

  """column name"""
  spi

  """column name"""
  strategic_priority_index

  """column name"""
  sub_continent

  """column name"""
  the_hope

  """column name"""
  threat_level

  """column name"""
  written_scripture
}

"""aggregate stddev on columns"""
type gsec_listing_of_people_groups_stddev_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""aggregate stddev_pop on columns"""
type gsec_listing_of_people_groups_stddev_pop_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""aggregate stddev_samp on columns"""
type gsec_listing_of_people_groups_stddev_samp_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""
Streaming cursor of the table "gsec_listing_of_people_groups"
"""
input gsec_listing_of_people_groups_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: gsec_listing_of_people_groups_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input gsec_listing_of_people_groups_stream_cursor_value_input {
  affinity_bloc: String
  audio_scripture: Boolean
  continent: String
  country: String
  country_of_origin: String
  dispersed: Boolean
  evangelical_engagement: Boolean
  fips: String
  fips_of_origin: String
  freedom_index: String
  genc: String
  global_status_of_evangelical_christianity: Int
  gospel_films: Boolean
  gospel_recording: Boolean
  government_restrictions_index: String
  id: bigint
  imb_affinity_group: String
  jesus_film: Boolean
  language: String
  latitude: String
  longitude: String
  nomadic: Boolean
  nomadic_description: String
  nomadic_type: Int
  not_engaged_anywhere: String
  peid: bigint
  people_cluster: String
  people_group: String
  people_name: String
  physical_exertion: String
  population: bigint
  population_layer: String
  radio_broadcast: Boolean
  religion: String
  resources: Int
  rol: String
  rop1: String
  rop2: String
  rop3: Int
  social_hostilities_index: String
  spi: Int
  strategic_priority_index: String
  sub_continent: String
  the_hope: Boolean
  threat_level: String
  written_scripture: Boolean
}

"""aggregate sum on columns"""
type gsec_listing_of_people_groups_sum_fields {
  global_status_of_evangelical_christianity: Int
  id: bigint
  nomadic_type: Int
  peid: bigint
  population: bigint
  resources: Int
  rop3: Int
  spi: Int
}

"""aggregate var_pop on columns"""
type gsec_listing_of_people_groups_var_pop_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""aggregate var_samp on columns"""
type gsec_listing_of_people_groups_var_samp_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""aggregate variance on columns"""
type gsec_listing_of_people_groups_variance_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""
columns and relationships of "gsec_listing_of_unengaged_unreached_people_groups"
"""
type gsec_listing_of_unengaged_unreached_people_groups {
  affinity_bloc: String
  audio_scripture: Boolean
  continent: String
  country: String
  country_of_origin: String
  diaspora: Boolean
  dispersed: Boolean
  evangelical_engagement: Boolean
  fips: String
  fips_of_origin: String
  freedom_index: String
  genc: String
  global_status_of_evangelical_christianity: Int
  gospel_films: Boolean
  gospel_recording: Boolean
  government_restrictions_index: String
  id: bigint!
  imb_affinity_group: String
  jesus_film: Boolean
  language: String
  latitude: String
  longitude: String
  nomadic: Boolean
  nomadic_description: String
  nomadic_type: Int
  not_engaged_anywhere: String
  peid: bigint
  people_cluster: String
  people_group: String
  physical_exertion: String
  population: bigint
  published_scripture: Boolean
  radio_broadcast: Boolean
  religion: String
  resources: Int
  rol: String
  rop1: String
  rop2: String
  rop3: Int
  rop_people_name: String
  ror: String
  social_hostilities_index: String
  spi: Int
  strategic_priority_index: String
  sub_continent: String
  the_hope: Boolean
  threat_level: String
}

"""
aggregated selection of "gsec_listing_of_unengaged_unreached_people_groups"
"""
type gsec_listing_of_unengaged_unreached_people_groups_aggregate {
  aggregate: gsec_listing_of_unengaged_unreached_people_groups_aggregate_fields
  nodes: [gsec_listing_of_unengaged_unreached_people_groups!]!
}

"""
aggregate fields of "gsec_listing_of_unengaged_unreached_people_groups"
"""
type gsec_listing_of_unengaged_unreached_people_groups_aggregate_fields {
  avg: gsec_listing_of_unengaged_unreached_people_groups_avg_fields
  count(columns: [gsec_listing_of_unengaged_unreached_people_groups_select_column!], distinct: Boolean): Int!
  max: gsec_listing_of_unengaged_unreached_people_groups_max_fields
  min: gsec_listing_of_unengaged_unreached_people_groups_min_fields
  stddev: gsec_listing_of_unengaged_unreached_people_groups_stddev_fields
  stddev_pop: gsec_listing_of_unengaged_unreached_people_groups_stddev_pop_fields
  stddev_samp: gsec_listing_of_unengaged_unreached_people_groups_stddev_samp_fields
  sum: gsec_listing_of_unengaged_unreached_people_groups_sum_fields
  var_pop: gsec_listing_of_unengaged_unreached_people_groups_var_pop_fields
  var_samp: gsec_listing_of_unengaged_unreached_people_groups_var_samp_fields
  variance: gsec_listing_of_unengaged_unreached_people_groups_variance_fields
}

"""aggregate avg on columns"""
type gsec_listing_of_unengaged_unreached_people_groups_avg_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""
Boolean expression to filter rows from the table "gsec_listing_of_unengaged_unreached_people_groups". All fields are combined with a logical 'AND'.
"""
input gsec_listing_of_unengaged_unreached_people_groups_bool_exp {
  _and: [gsec_listing_of_unengaged_unreached_people_groups_bool_exp!]
  _not: gsec_listing_of_unengaged_unreached_people_groups_bool_exp
  _or: [gsec_listing_of_unengaged_unreached_people_groups_bool_exp!]
  affinity_bloc: String_comparison_exp
  audio_scripture: Boolean_comparison_exp
  continent: String_comparison_exp
  country: String_comparison_exp
  country_of_origin: String_comparison_exp
  diaspora: Boolean_comparison_exp
  dispersed: Boolean_comparison_exp
  evangelical_engagement: Boolean_comparison_exp
  fips: String_comparison_exp
  fips_of_origin: String_comparison_exp
  freedom_index: String_comparison_exp
  genc: String_comparison_exp
  global_status_of_evangelical_christianity: Int_comparison_exp
  gospel_films: Boolean_comparison_exp
  gospel_recording: Boolean_comparison_exp
  government_restrictions_index: String_comparison_exp
  id: bigint_comparison_exp
  imb_affinity_group: String_comparison_exp
  jesus_film: Boolean_comparison_exp
  language: String_comparison_exp
  latitude: String_comparison_exp
  longitude: String_comparison_exp
  nomadic: Boolean_comparison_exp
  nomadic_description: String_comparison_exp
  nomadic_type: Int_comparison_exp
  not_engaged_anywhere: String_comparison_exp
  peid: bigint_comparison_exp
  people_cluster: String_comparison_exp
  people_group: String_comparison_exp
  physical_exertion: String_comparison_exp
  population: bigint_comparison_exp
  published_scripture: Boolean_comparison_exp
  radio_broadcast: Boolean_comparison_exp
  religion: String_comparison_exp
  resources: Int_comparison_exp
  rol: String_comparison_exp
  rop1: String_comparison_exp
  rop2: String_comparison_exp
  rop3: Int_comparison_exp
  rop_people_name: String_comparison_exp
  ror: String_comparison_exp
  social_hostilities_index: String_comparison_exp
  spi: Int_comparison_exp
  strategic_priority_index: String_comparison_exp
  sub_continent: String_comparison_exp
  the_hope: Boolean_comparison_exp
  threat_level: String_comparison_exp
}

"""aggregate max on columns"""
type gsec_listing_of_unengaged_unreached_people_groups_max_fields {
  affinity_bloc: String
  continent: String
  country: String
  country_of_origin: String
  fips: String
  fips_of_origin: String
  freedom_index: String
  genc: String
  global_status_of_evangelical_christianity: Int
  government_restrictions_index: String
  id: bigint
  imb_affinity_group: String
  language: String
  latitude: String
  longitude: String
  nomadic_description: String
  nomadic_type: Int
  not_engaged_anywhere: String
  peid: bigint
  people_cluster: String
  people_group: String
  physical_exertion: String
  population: bigint
  religion: String
  resources: Int
  rol: String
  rop1: String
  rop2: String
  rop3: Int
  rop_people_name: String
  ror: String
  social_hostilities_index: String
  spi: Int
  strategic_priority_index: String
  sub_continent: String
  threat_level: String
}

"""aggregate min on columns"""
type gsec_listing_of_unengaged_unreached_people_groups_min_fields {
  affinity_bloc: String
  continent: String
  country: String
  country_of_origin: String
  fips: String
  fips_of_origin: String
  freedom_index: String
  genc: String
  global_status_of_evangelical_christianity: Int
  government_restrictions_index: String
  id: bigint
  imb_affinity_group: String
  language: String
  latitude: String
  longitude: String
  nomadic_description: String
  nomadic_type: Int
  not_engaged_anywhere: String
  peid: bigint
  people_cluster: String
  people_group: String
  physical_exertion: String
  population: bigint
  religion: String
  resources: Int
  rol: String
  rop1: String
  rop2: String
  rop3: Int
  rop_people_name: String
  ror: String
  social_hostilities_index: String
  spi: Int
  strategic_priority_index: String
  sub_continent: String
  threat_level: String
}

"""
Ordering options when selecting data from "gsec_listing_of_unengaged_unreached_people_groups".
"""
input gsec_listing_of_unengaged_unreached_people_groups_order_by {
  affinity_bloc: order_by
  audio_scripture: order_by
  continent: order_by
  country: order_by
  country_of_origin: order_by
  diaspora: order_by
  dispersed: order_by
  evangelical_engagement: order_by
  fips: order_by
  fips_of_origin: order_by
  freedom_index: order_by
  genc: order_by
  global_status_of_evangelical_christianity: order_by
  gospel_films: order_by
  gospel_recording: order_by
  government_restrictions_index: order_by
  id: order_by
  imb_affinity_group: order_by
  jesus_film: order_by
  language: order_by
  latitude: order_by
  longitude: order_by
  nomadic: order_by
  nomadic_description: order_by
  nomadic_type: order_by
  not_engaged_anywhere: order_by
  peid: order_by
  people_cluster: order_by
  people_group: order_by
  physical_exertion: order_by
  population: order_by
  published_scripture: order_by
  radio_broadcast: order_by
  religion: order_by
  resources: order_by
  rol: order_by
  rop1: order_by
  rop2: order_by
  rop3: order_by
  rop_people_name: order_by
  ror: order_by
  social_hostilities_index: order_by
  spi: order_by
  strategic_priority_index: order_by
  sub_continent: order_by
  the_hope: order_by
  threat_level: order_by
}

"""
select columns of table "gsec_listing_of_unengaged_unreached_people_groups"
"""
enum gsec_listing_of_unengaged_unreached_people_groups_select_column {
  """column name"""
  affinity_bloc

  """column name"""
  audio_scripture

  """column name"""
  continent

  """column name"""
  country

  """column name"""
  country_of_origin

  """column name"""
  diaspora

  """column name"""
  dispersed

  """column name"""
  evangelical_engagement

  """column name"""
  fips

  """column name"""
  fips_of_origin

  """column name"""
  freedom_index

  """column name"""
  genc

  """column name"""
  global_status_of_evangelical_christianity

  """column name"""
  gospel_films

  """column name"""
  gospel_recording

  """column name"""
  government_restrictions_index

  """column name"""
  id

  """column name"""
  imb_affinity_group

  """column name"""
  jesus_film

  """column name"""
  language

  """column name"""
  latitude

  """column name"""
  longitude

  """column name"""
  nomadic

  """column name"""
  nomadic_description

  """column name"""
  nomadic_type

  """column name"""
  not_engaged_anywhere

  """column name"""
  peid

  """column name"""
  people_cluster

  """column name"""
  people_group

  """column name"""
  physical_exertion

  """column name"""
  population

  """column name"""
  published_scripture

  """column name"""
  radio_broadcast

  """column name"""
  religion

  """column name"""
  resources

  """column name"""
  rol

  """column name"""
  rop1

  """column name"""
  rop2

  """column name"""
  rop3

  """column name"""
  rop_people_name

  """column name"""
  ror

  """column name"""
  social_hostilities_index

  """column name"""
  spi

  """column name"""
  strategic_priority_index

  """column name"""
  sub_continent

  """column name"""
  the_hope

  """column name"""
  threat_level
}

"""aggregate stddev on columns"""
type gsec_listing_of_unengaged_unreached_people_groups_stddev_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""aggregate stddev_pop on columns"""
type gsec_listing_of_unengaged_unreached_people_groups_stddev_pop_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""aggregate stddev_samp on columns"""
type gsec_listing_of_unengaged_unreached_people_groups_stddev_samp_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""
Streaming cursor of the table "gsec_listing_of_unengaged_unreached_people_groups"
"""
input gsec_listing_of_unengaged_unreached_people_groups_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: gsec_listing_of_unengaged_unreached_people_groups_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input gsec_listing_of_unengaged_unreached_people_groups_stream_cursor_value_input {
  affinity_bloc: String
  audio_scripture: Boolean
  continent: String
  country: String
  country_of_origin: String
  diaspora: Boolean
  dispersed: Boolean
  evangelical_engagement: Boolean
  fips: String
  fips_of_origin: String
  freedom_index: String
  genc: String
  global_status_of_evangelical_christianity: Int
  gospel_films: Boolean
  gospel_recording: Boolean
  government_restrictions_index: String
  id: bigint
  imb_affinity_group: String
  jesus_film: Boolean
  language: String
  latitude: String
  longitude: String
  nomadic: Boolean
  nomadic_description: String
  nomadic_type: Int
  not_engaged_anywhere: String
  peid: bigint
  people_cluster: String
  people_group: String
  physical_exertion: String
  population: bigint
  published_scripture: Boolean
  radio_broadcast: Boolean
  religion: String
  resources: Int
  rol: String
  rop1: String
  rop2: String
  rop3: Int
  rop_people_name: String
  ror: String
  social_hostilities_index: String
  spi: Int
  strategic_priority_index: String
  sub_continent: String
  the_hope: Boolean
  threat_level: String
}

"""aggregate sum on columns"""
type gsec_listing_of_unengaged_unreached_people_groups_sum_fields {
  global_status_of_evangelical_christianity: Int
  id: bigint
  nomadic_type: Int
  peid: bigint
  population: bigint
  resources: Int
  rop3: Int
  spi: Int
}

"""aggregate var_pop on columns"""
type gsec_listing_of_unengaged_unreached_people_groups_var_pop_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""aggregate var_samp on columns"""
type gsec_listing_of_unengaged_unreached_people_groups_var_samp_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""aggregate variance on columns"""
type gsec_listing_of_unengaged_unreached_people_groups_variance_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""
columns and relationships of "gsec_listing_of_unreached_people_groups"
"""
type gsec_listing_of_unreached_people_groups {
  affinity_bloc: String
  audio_scripture: Boolean
  continent: String
  country: String
  country_of_origin: String
  dispersed: Boolean
  evangelical_engagement: Boolean
  fips: String
  fips_of_origin: String
  freedom_index: String
  genc: String
  global_status_of_evangelical_christianity: Int
  gospel_films: Boolean
  gospel_recording: Boolean
  government_restrictions_index: String
  id: bigint!
  imb_affinity_group: String
  jesus_film: Boolean
  language: String
  latitude: String
  longitude: String
  nomadic: Boolean
  nomadic_description: String
  nomadic_type: Int
  not_engaged_anywhere: String
  peid: bigint
  people_cluster: String
  people_group: String
  physical_exertion: String
  population: bigint
  published_scripture: Boolean
  radio_broadcast: Boolean
  religion: String
  resources: Int
  rol: String
  rop1: String
  rop2: String
  rop3: Int
  rop_people_name: String
  social_hostilities_index: String
  spi: Int
  strategic_priority_index: String
  sub_continent: String
  the_hope: Boolean
  threat_level: String
}

"""
aggregated selection of "gsec_listing_of_unreached_people_groups"
"""
type gsec_listing_of_unreached_people_groups_aggregate {
  aggregate: gsec_listing_of_unreached_people_groups_aggregate_fields
  nodes: [gsec_listing_of_unreached_people_groups!]!
}

"""
aggregate fields of "gsec_listing_of_unreached_people_groups"
"""
type gsec_listing_of_unreached_people_groups_aggregate_fields {
  avg: gsec_listing_of_unreached_people_groups_avg_fields
  count(columns: [gsec_listing_of_unreached_people_groups_select_column!], distinct: Boolean): Int!
  max: gsec_listing_of_unreached_people_groups_max_fields
  min: gsec_listing_of_unreached_people_groups_min_fields
  stddev: gsec_listing_of_unreached_people_groups_stddev_fields
  stddev_pop: gsec_listing_of_unreached_people_groups_stddev_pop_fields
  stddev_samp: gsec_listing_of_unreached_people_groups_stddev_samp_fields
  sum: gsec_listing_of_unreached_people_groups_sum_fields
  var_pop: gsec_listing_of_unreached_people_groups_var_pop_fields
  var_samp: gsec_listing_of_unreached_people_groups_var_samp_fields
  variance: gsec_listing_of_unreached_people_groups_variance_fields
}

"""aggregate avg on columns"""
type gsec_listing_of_unreached_people_groups_avg_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""
Boolean expression to filter rows from the table "gsec_listing_of_unreached_people_groups". All fields are combined with a logical 'AND'.
"""
input gsec_listing_of_unreached_people_groups_bool_exp {
  _and: [gsec_listing_of_unreached_people_groups_bool_exp!]
  _not: gsec_listing_of_unreached_people_groups_bool_exp
  _or: [gsec_listing_of_unreached_people_groups_bool_exp!]
  affinity_bloc: String_comparison_exp
  audio_scripture: Boolean_comparison_exp
  continent: String_comparison_exp
  country: String_comparison_exp
  country_of_origin: String_comparison_exp
  dispersed: Boolean_comparison_exp
  evangelical_engagement: Boolean_comparison_exp
  fips: String_comparison_exp
  fips_of_origin: String_comparison_exp
  freedom_index: String_comparison_exp
  genc: String_comparison_exp
  global_status_of_evangelical_christianity: Int_comparison_exp
  gospel_films: Boolean_comparison_exp
  gospel_recording: Boolean_comparison_exp
  government_restrictions_index: String_comparison_exp
  id: bigint_comparison_exp
  imb_affinity_group: String_comparison_exp
  jesus_film: Boolean_comparison_exp
  language: String_comparison_exp
  latitude: String_comparison_exp
  longitude: String_comparison_exp
  nomadic: Boolean_comparison_exp
  nomadic_description: String_comparison_exp
  nomadic_type: Int_comparison_exp
  not_engaged_anywhere: String_comparison_exp
  peid: bigint_comparison_exp
  people_cluster: String_comparison_exp
  people_group: String_comparison_exp
  physical_exertion: String_comparison_exp
  population: bigint_comparison_exp
  published_scripture: Boolean_comparison_exp
  radio_broadcast: Boolean_comparison_exp
  religion: String_comparison_exp
  resources: Int_comparison_exp
  rol: String_comparison_exp
  rop1: String_comparison_exp
  rop2: String_comparison_exp
  rop3: Int_comparison_exp
  rop_people_name: String_comparison_exp
  social_hostilities_index: String_comparison_exp
  spi: Int_comparison_exp
  strategic_priority_index: String_comparison_exp
  sub_continent: String_comparison_exp
  the_hope: Boolean_comparison_exp
  threat_level: String_comparison_exp
}

"""aggregate max on columns"""
type gsec_listing_of_unreached_people_groups_max_fields {
  affinity_bloc: String
  continent: String
  country: String
  country_of_origin: String
  fips: String
  fips_of_origin: String
  freedom_index: String
  genc: String
  global_status_of_evangelical_christianity: Int
  government_restrictions_index: String
  id: bigint
  imb_affinity_group: String
  language: String
  latitude: String
  longitude: String
  nomadic_description: String
  nomadic_type: Int
  not_engaged_anywhere: String
  peid: bigint
  people_cluster: String
  people_group: String
  physical_exertion: String
  population: bigint
  religion: String
  resources: Int
  rol: String
  rop1: String
  rop2: String
  rop3: Int
  rop_people_name: String
  social_hostilities_index: String
  spi: Int
  strategic_priority_index: String
  sub_continent: String
  threat_level: String
}

"""aggregate min on columns"""
type gsec_listing_of_unreached_people_groups_min_fields {
  affinity_bloc: String
  continent: String
  country: String
  country_of_origin: String
  fips: String
  fips_of_origin: String
  freedom_index: String
  genc: String
  global_status_of_evangelical_christianity: Int
  government_restrictions_index: String
  id: bigint
  imb_affinity_group: String
  language: String
  latitude: String
  longitude: String
  nomadic_description: String
  nomadic_type: Int
  not_engaged_anywhere: String
  peid: bigint
  people_cluster: String
  people_group: String
  physical_exertion: String
  population: bigint
  religion: String
  resources: Int
  rol: String
  rop1: String
  rop2: String
  rop3: Int
  rop_people_name: String
  social_hostilities_index: String
  spi: Int
  strategic_priority_index: String
  sub_continent: String
  threat_level: String
}

"""
Ordering options when selecting data from "gsec_listing_of_unreached_people_groups".
"""
input gsec_listing_of_unreached_people_groups_order_by {
  affinity_bloc: order_by
  audio_scripture: order_by
  continent: order_by
  country: order_by
  country_of_origin: order_by
  dispersed: order_by
  evangelical_engagement: order_by
  fips: order_by
  fips_of_origin: order_by
  freedom_index: order_by
  genc: order_by
  global_status_of_evangelical_christianity: order_by
  gospel_films: order_by
  gospel_recording: order_by
  government_restrictions_index: order_by
  id: order_by
  imb_affinity_group: order_by
  jesus_film: order_by
  language: order_by
  latitude: order_by
  longitude: order_by
  nomadic: order_by
  nomadic_description: order_by
  nomadic_type: order_by
  not_engaged_anywhere: order_by
  peid: order_by
  people_cluster: order_by
  people_group: order_by
  physical_exertion: order_by
  population: order_by
  published_scripture: order_by
  radio_broadcast: order_by
  religion: order_by
  resources: order_by
  rol: order_by
  rop1: order_by
  rop2: order_by
  rop3: order_by
  rop_people_name: order_by
  social_hostilities_index: order_by
  spi: order_by
  strategic_priority_index: order_by
  sub_continent: order_by
  the_hope: order_by
  threat_level: order_by
}

"""
select columns of table "gsec_listing_of_unreached_people_groups"
"""
enum gsec_listing_of_unreached_people_groups_select_column {
  """column name"""
  affinity_bloc

  """column name"""
  audio_scripture

  """column name"""
  continent

  """column name"""
  country

  """column name"""
  country_of_origin

  """column name"""
  dispersed

  """column name"""
  evangelical_engagement

  """column name"""
  fips

  """column name"""
  fips_of_origin

  """column name"""
  freedom_index

  """column name"""
  genc

  """column name"""
  global_status_of_evangelical_christianity

  """column name"""
  gospel_films

  """column name"""
  gospel_recording

  """column name"""
  government_restrictions_index

  """column name"""
  id

  """column name"""
  imb_affinity_group

  """column name"""
  jesus_film

  """column name"""
  language

  """column name"""
  latitude

  """column name"""
  longitude

  """column name"""
  nomadic

  """column name"""
  nomadic_description

  """column name"""
  nomadic_type

  """column name"""
  not_engaged_anywhere

  """column name"""
  peid

  """column name"""
  people_cluster

  """column name"""
  people_group

  """column name"""
  physical_exertion

  """column name"""
  population

  """column name"""
  published_scripture

  """column name"""
  radio_broadcast

  """column name"""
  religion

  """column name"""
  resources

  """column name"""
  rol

  """column name"""
  rop1

  """column name"""
  rop2

  """column name"""
  rop3

  """column name"""
  rop_people_name

  """column name"""
  social_hostilities_index

  """column name"""
  spi

  """column name"""
  strategic_priority_index

  """column name"""
  sub_continent

  """column name"""
  the_hope

  """column name"""
  threat_level
}

"""aggregate stddev on columns"""
type gsec_listing_of_unreached_people_groups_stddev_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""aggregate stddev_pop on columns"""
type gsec_listing_of_unreached_people_groups_stddev_pop_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""aggregate stddev_samp on columns"""
type gsec_listing_of_unreached_people_groups_stddev_samp_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""
Streaming cursor of the table "gsec_listing_of_unreached_people_groups"
"""
input gsec_listing_of_unreached_people_groups_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: gsec_listing_of_unreached_people_groups_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input gsec_listing_of_unreached_people_groups_stream_cursor_value_input {
  affinity_bloc: String
  audio_scripture: Boolean
  continent: String
  country: String
  country_of_origin: String
  dispersed: Boolean
  evangelical_engagement: Boolean
  fips: String
  fips_of_origin: String
  freedom_index: String
  genc: String
  global_status_of_evangelical_christianity: Int
  gospel_films: Boolean
  gospel_recording: Boolean
  government_restrictions_index: String
  id: bigint
  imb_affinity_group: String
  jesus_film: Boolean
  language: String
  latitude: String
  longitude: String
  nomadic: Boolean
  nomadic_description: String
  nomadic_type: Int
  not_engaged_anywhere: String
  peid: bigint
  people_cluster: String
  people_group: String
  physical_exertion: String
  population: bigint
  published_scripture: Boolean
  radio_broadcast: Boolean
  religion: String
  resources: Int
  rol: String
  rop1: String
  rop2: String
  rop3: Int
  rop_people_name: String
  social_hostilities_index: String
  spi: Int
  strategic_priority_index: String
  sub_continent: String
  the_hope: Boolean
  threat_level: String
}

"""aggregate sum on columns"""
type gsec_listing_of_unreached_people_groups_sum_fields {
  global_status_of_evangelical_christianity: Int
  id: bigint
  nomadic_type: Int
  peid: bigint
  population: bigint
  resources: Int
  rop3: Int
  spi: Int
}

"""aggregate var_pop on columns"""
type gsec_listing_of_unreached_people_groups_var_pop_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""aggregate var_samp on columns"""
type gsec_listing_of_unreached_people_groups_var_samp_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""aggregate variance on columns"""
type gsec_listing_of_unreached_people_groups_variance_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""
columns and relationships of "gsec_listing_of_uupg_100k"
"""
type gsec_listing_of_uupg_100k {
  addition: Boolean
  addition_date: timestamp
  addition_reasons: String
  affinity_bloc: String
  audio_scripture: Boolean
  continent: String
  country: String
  country_of_origin: String
  dispersed: Boolean
  fips: String
  fips_of_origin: String
  freedom_index: String
  genc: String
  global_status_of_evangelical_christianity: Int
  gospel_films: Boolean
  gospel_recording: Boolean
  government_restrictions_index: String
  id: bigint!
  imb_affinity_group: String
  jesus_film: Boolean
  language: String
  latitude: String
  longitude: String
  nomadic: Boolean
  nomadic_description: String
  nomadic_type: Int
  not_engaged_anywhere: String
  peid: bigint
  people_cluster: String
  people_group: String
  people_name: String
  physical_exertion: String
  population: bigint
  published_scripture: Boolean
  radio_broadcast: Boolean
  religion: String
  resources: Int
  rol: String
  rop1: String
  rop2: String
  rop3: Int
  social_hostilities_index: String
  spi: Int
  strategic_priority_index: String
  sub_continent: String
  the_hope: Boolean
  threat_level: String
}

"""
columns and relationships of "gsec_listing_of_uupg_100k_additions"
"""
type gsec_listing_of_uupg_100k_additions {
  addition_date: timestamp
  addition_reasons: String
  affinity_bloc: String
  country: String
  global_status_of__evangelical_christianity: Int
  id: bigint!
  language: String
  peid: bigint
  people_cluster: String
  people_group: String
  population: bigint
  religion: String
}

"""
aggregated selection of "gsec_listing_of_uupg_100k_additions"
"""
type gsec_listing_of_uupg_100k_additions_aggregate {
  aggregate: gsec_listing_of_uupg_100k_additions_aggregate_fields
  nodes: [gsec_listing_of_uupg_100k_additions!]!
}

"""
aggregate fields of "gsec_listing_of_uupg_100k_additions"
"""
type gsec_listing_of_uupg_100k_additions_aggregate_fields {
  avg: gsec_listing_of_uupg_100k_additions_avg_fields
  count(columns: [gsec_listing_of_uupg_100k_additions_select_column!], distinct: Boolean): Int!
  max: gsec_listing_of_uupg_100k_additions_max_fields
  min: gsec_listing_of_uupg_100k_additions_min_fields
  stddev: gsec_listing_of_uupg_100k_additions_stddev_fields
  stddev_pop: gsec_listing_of_uupg_100k_additions_stddev_pop_fields
  stddev_samp: gsec_listing_of_uupg_100k_additions_stddev_samp_fields
  sum: gsec_listing_of_uupg_100k_additions_sum_fields
  var_pop: gsec_listing_of_uupg_100k_additions_var_pop_fields
  var_samp: gsec_listing_of_uupg_100k_additions_var_samp_fields
  variance: gsec_listing_of_uupg_100k_additions_variance_fields
}

"""aggregate avg on columns"""
type gsec_listing_of_uupg_100k_additions_avg_fields {
  global_status_of__evangelical_christianity: Float
  id: Float
  peid: Float
  population: Float
}

"""
Boolean expression to filter rows from the table "gsec_listing_of_uupg_100k_additions". All fields are combined with a logical 'AND'.
"""
input gsec_listing_of_uupg_100k_additions_bool_exp {
  _and: [gsec_listing_of_uupg_100k_additions_bool_exp!]
  _not: gsec_listing_of_uupg_100k_additions_bool_exp
  _or: [gsec_listing_of_uupg_100k_additions_bool_exp!]
  addition_date: timestamp_comparison_exp
  addition_reasons: String_comparison_exp
  affinity_bloc: String_comparison_exp
  country: String_comparison_exp
  global_status_of__evangelical_christianity: Int_comparison_exp
  id: bigint_comparison_exp
  language: String_comparison_exp
  peid: bigint_comparison_exp
  people_cluster: String_comparison_exp
  people_group: String_comparison_exp
  population: bigint_comparison_exp
  religion: String_comparison_exp
}

"""aggregate max on columns"""
type gsec_listing_of_uupg_100k_additions_max_fields {
  addition_date: timestamp
  addition_reasons: String
  affinity_bloc: String
  country: String
  global_status_of__evangelical_christianity: Int
  id: bigint
  language: String
  peid: bigint
  people_cluster: String
  people_group: String
  population: bigint
  religion: String
}

"""aggregate min on columns"""
type gsec_listing_of_uupg_100k_additions_min_fields {
  addition_date: timestamp
  addition_reasons: String
  affinity_bloc: String
  country: String
  global_status_of__evangelical_christianity: Int
  id: bigint
  language: String
  peid: bigint
  people_cluster: String
  people_group: String
  population: bigint
  religion: String
}

"""
Ordering options when selecting data from "gsec_listing_of_uupg_100k_additions".
"""
input gsec_listing_of_uupg_100k_additions_order_by {
  addition_date: order_by
  addition_reasons: order_by
  affinity_bloc: order_by
  country: order_by
  global_status_of__evangelical_christianity: order_by
  id: order_by
  language: order_by
  peid: order_by
  people_cluster: order_by
  people_group: order_by
  population: order_by
  religion: order_by
}

"""
select columns of table "gsec_listing_of_uupg_100k_additions"
"""
enum gsec_listing_of_uupg_100k_additions_select_column {
  """column name"""
  addition_date

  """column name"""
  addition_reasons

  """column name"""
  affinity_bloc

  """column name"""
  country

  """column name"""
  global_status_of__evangelical_christianity

  """column name"""
  id

  """column name"""
  language

  """column name"""
  peid

  """column name"""
  people_cluster

  """column name"""
  people_group

  """column name"""
  population

  """column name"""
  religion
}

"""aggregate stddev on columns"""
type gsec_listing_of_uupg_100k_additions_stddev_fields {
  global_status_of__evangelical_christianity: Float
  id: Float
  peid: Float
  population: Float
}

"""aggregate stddev_pop on columns"""
type gsec_listing_of_uupg_100k_additions_stddev_pop_fields {
  global_status_of__evangelical_christianity: Float
  id: Float
  peid: Float
  population: Float
}

"""aggregate stddev_samp on columns"""
type gsec_listing_of_uupg_100k_additions_stddev_samp_fields {
  global_status_of__evangelical_christianity: Float
  id: Float
  peid: Float
  population: Float
}

"""
Streaming cursor of the table "gsec_listing_of_uupg_100k_additions"
"""
input gsec_listing_of_uupg_100k_additions_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: gsec_listing_of_uupg_100k_additions_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input gsec_listing_of_uupg_100k_additions_stream_cursor_value_input {
  addition_date: timestamp
  addition_reasons: String
  affinity_bloc: String
  country: String
  global_status_of__evangelical_christianity: Int
  id: bigint
  language: String
  peid: bigint
  people_cluster: String
  people_group: String
  population: bigint
  religion: String
}

"""aggregate sum on columns"""
type gsec_listing_of_uupg_100k_additions_sum_fields {
  global_status_of__evangelical_christianity: Int
  id: bigint
  peid: bigint
  population: bigint
}

"""aggregate var_pop on columns"""
type gsec_listing_of_uupg_100k_additions_var_pop_fields {
  global_status_of__evangelical_christianity: Float
  id: Float
  peid: Float
  population: Float
}

"""aggregate var_samp on columns"""
type gsec_listing_of_uupg_100k_additions_var_samp_fields {
  global_status_of__evangelical_christianity: Float
  id: Float
  peid: Float
  population: Float
}

"""aggregate variance on columns"""
type gsec_listing_of_uupg_100k_additions_variance_fields {
  global_status_of__evangelical_christianity: Float
  id: Float
  peid: Float
  population: Float
}

"""
aggregated selection of "gsec_listing_of_uupg_100k"
"""
type gsec_listing_of_uupg_100k_aggregate {
  aggregate: gsec_listing_of_uupg_100k_aggregate_fields
  nodes: [gsec_listing_of_uupg_100k!]!
}

"""
aggregate fields of "gsec_listing_of_uupg_100k"
"""
type gsec_listing_of_uupg_100k_aggregate_fields {
  avg: gsec_listing_of_uupg_100k_avg_fields
  count(columns: [gsec_listing_of_uupg_100k_select_column!], distinct: Boolean): Int!
  max: gsec_listing_of_uupg_100k_max_fields
  min: gsec_listing_of_uupg_100k_min_fields
  stddev: gsec_listing_of_uupg_100k_stddev_fields
  stddev_pop: gsec_listing_of_uupg_100k_stddev_pop_fields
  stddev_samp: gsec_listing_of_uupg_100k_stddev_samp_fields
  sum: gsec_listing_of_uupg_100k_sum_fields
  var_pop: gsec_listing_of_uupg_100k_var_pop_fields
  var_samp: gsec_listing_of_uupg_100k_var_samp_fields
  variance: gsec_listing_of_uupg_100k_variance_fields
}

"""aggregate avg on columns"""
type gsec_listing_of_uupg_100k_avg_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""
Boolean expression to filter rows from the table "gsec_listing_of_uupg_100k". All fields are combined with a logical 'AND'.
"""
input gsec_listing_of_uupg_100k_bool_exp {
  _and: [gsec_listing_of_uupg_100k_bool_exp!]
  _not: gsec_listing_of_uupg_100k_bool_exp
  _or: [gsec_listing_of_uupg_100k_bool_exp!]
  addition: Boolean_comparison_exp
  addition_date: timestamp_comparison_exp
  addition_reasons: String_comparison_exp
  affinity_bloc: String_comparison_exp
  audio_scripture: Boolean_comparison_exp
  continent: String_comparison_exp
  country: String_comparison_exp
  country_of_origin: String_comparison_exp
  dispersed: Boolean_comparison_exp
  fips: String_comparison_exp
  fips_of_origin: String_comparison_exp
  freedom_index: String_comparison_exp
  genc: String_comparison_exp
  global_status_of_evangelical_christianity: Int_comparison_exp
  gospel_films: Boolean_comparison_exp
  gospel_recording: Boolean_comparison_exp
  government_restrictions_index: String_comparison_exp
  id: bigint_comparison_exp
  imb_affinity_group: String_comparison_exp
  jesus_film: Boolean_comparison_exp
  language: String_comparison_exp
  latitude: String_comparison_exp
  longitude: String_comparison_exp
  nomadic: Boolean_comparison_exp
  nomadic_description: String_comparison_exp
  nomadic_type: Int_comparison_exp
  not_engaged_anywhere: String_comparison_exp
  peid: bigint_comparison_exp
  people_cluster: String_comparison_exp
  people_group: String_comparison_exp
  people_name: String_comparison_exp
  physical_exertion: String_comparison_exp
  population: bigint_comparison_exp
  published_scripture: Boolean_comparison_exp
  radio_broadcast: Boolean_comparison_exp
  religion: String_comparison_exp
  resources: Int_comparison_exp
  rol: String_comparison_exp
  rop1: String_comparison_exp
  rop2: String_comparison_exp
  rop3: Int_comparison_exp
  social_hostilities_index: String_comparison_exp
  spi: Int_comparison_exp
  strategic_priority_index: String_comparison_exp
  sub_continent: String_comparison_exp
  the_hope: Boolean_comparison_exp
  threat_level: String_comparison_exp
}

"""aggregate max on columns"""
type gsec_listing_of_uupg_100k_max_fields {
  addition_date: timestamp
  addition_reasons: String
  affinity_bloc: String
  continent: String
  country: String
  country_of_origin: String
  fips: String
  fips_of_origin: String
  freedom_index: String
  genc: String
  global_status_of_evangelical_christianity: Int
  government_restrictions_index: String
  id: bigint
  imb_affinity_group: String
  language: String
  latitude: String
  longitude: String
  nomadic_description: String
  nomadic_type: Int
  not_engaged_anywhere: String
  peid: bigint
  people_cluster: String
  people_group: String
  people_name: String
  physical_exertion: String
  population: bigint
  religion: String
  resources: Int
  rol: String
  rop1: String
  rop2: String
  rop3: Int
  social_hostilities_index: String
  spi: Int
  strategic_priority_index: String
  sub_continent: String
  threat_level: String
}

"""aggregate min on columns"""
type gsec_listing_of_uupg_100k_min_fields {
  addition_date: timestamp
  addition_reasons: String
  affinity_bloc: String
  continent: String
  country: String
  country_of_origin: String
  fips: String
  fips_of_origin: String
  freedom_index: String
  genc: String
  global_status_of_evangelical_christianity: Int
  government_restrictions_index: String
  id: bigint
  imb_affinity_group: String
  language: String
  latitude: String
  longitude: String
  nomadic_description: String
  nomadic_type: Int
  not_engaged_anywhere: String
  peid: bigint
  people_cluster: String
  people_group: String
  people_name: String
  physical_exertion: String
  population: bigint
  religion: String
  resources: Int
  rol: String
  rop1: String
  rop2: String
  rop3: Int
  social_hostilities_index: String
  spi: Int
  strategic_priority_index: String
  sub_continent: String
  threat_level: String
}

"""Ordering options when selecting data from "gsec_listing_of_uupg_100k"."""
input gsec_listing_of_uupg_100k_order_by {
  addition: order_by
  addition_date: order_by
  addition_reasons: order_by
  affinity_bloc: order_by
  audio_scripture: order_by
  continent: order_by
  country: order_by
  country_of_origin: order_by
  dispersed: order_by
  fips: order_by
  fips_of_origin: order_by
  freedom_index: order_by
  genc: order_by
  global_status_of_evangelical_christianity: order_by
  gospel_films: order_by
  gospel_recording: order_by
  government_restrictions_index: order_by
  id: order_by
  imb_affinity_group: order_by
  jesus_film: order_by
  language: order_by
  latitude: order_by
  longitude: order_by
  nomadic: order_by
  nomadic_description: order_by
  nomadic_type: order_by
  not_engaged_anywhere: order_by
  peid: order_by
  people_cluster: order_by
  people_group: order_by
  people_name: order_by
  physical_exertion: order_by
  population: order_by
  published_scripture: order_by
  radio_broadcast: order_by
  religion: order_by
  resources: order_by
  rol: order_by
  rop1: order_by
  rop2: order_by
  rop3: order_by
  social_hostilities_index: order_by
  spi: order_by
  strategic_priority_index: order_by
  sub_continent: order_by
  the_hope: order_by
  threat_level: order_by
}

"""
columns and relationships of "gsec_listing_of_uupg_100k_removals"
"""
type gsec_listing_of_uupg_100k_removals {
  addition_date: timestamp
  addition_reasons: String
  affinity_bloc: String
  country: String
  global_status_of_evangelical_christianity: Int
  id: bigint!
  language: String
  peid: bigint
  people_cluster: String
  people_group: String
  population: bigint
  religion: String
}

"""
aggregated selection of "gsec_listing_of_uupg_100k_removals"
"""
type gsec_listing_of_uupg_100k_removals_aggregate {
  aggregate: gsec_listing_of_uupg_100k_removals_aggregate_fields
  nodes: [gsec_listing_of_uupg_100k_removals!]!
}

"""
aggregate fields of "gsec_listing_of_uupg_100k_removals"
"""
type gsec_listing_of_uupg_100k_removals_aggregate_fields {
  avg: gsec_listing_of_uupg_100k_removals_avg_fields
  count(columns: [gsec_listing_of_uupg_100k_removals_select_column!], distinct: Boolean): Int!
  max: gsec_listing_of_uupg_100k_removals_max_fields
  min: gsec_listing_of_uupg_100k_removals_min_fields
  stddev: gsec_listing_of_uupg_100k_removals_stddev_fields
  stddev_pop: gsec_listing_of_uupg_100k_removals_stddev_pop_fields
  stddev_samp: gsec_listing_of_uupg_100k_removals_stddev_samp_fields
  sum: gsec_listing_of_uupg_100k_removals_sum_fields
  var_pop: gsec_listing_of_uupg_100k_removals_var_pop_fields
  var_samp: gsec_listing_of_uupg_100k_removals_var_samp_fields
  variance: gsec_listing_of_uupg_100k_removals_variance_fields
}

"""aggregate avg on columns"""
type gsec_listing_of_uupg_100k_removals_avg_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  peid: Float
  population: Float
}

"""
Boolean expression to filter rows from the table "gsec_listing_of_uupg_100k_removals". All fields are combined with a logical 'AND'.
"""
input gsec_listing_of_uupg_100k_removals_bool_exp {
  _and: [gsec_listing_of_uupg_100k_removals_bool_exp!]
  _not: gsec_listing_of_uupg_100k_removals_bool_exp
  _or: [gsec_listing_of_uupg_100k_removals_bool_exp!]
  addition_date: timestamp_comparison_exp
  addition_reasons: String_comparison_exp
  affinity_bloc: String_comparison_exp
  country: String_comparison_exp
  global_status_of_evangelical_christianity: Int_comparison_exp
  id: bigint_comparison_exp
  language: String_comparison_exp
  peid: bigint_comparison_exp
  people_cluster: String_comparison_exp
  people_group: String_comparison_exp
  population: bigint_comparison_exp
  religion: String_comparison_exp
}

"""aggregate max on columns"""
type gsec_listing_of_uupg_100k_removals_max_fields {
  addition_date: timestamp
  addition_reasons: String
  affinity_bloc: String
  country: String
  global_status_of_evangelical_christianity: Int
  id: bigint
  language: String
  peid: bigint
  people_cluster: String
  people_group: String
  population: bigint
  religion: String
}

"""aggregate min on columns"""
type gsec_listing_of_uupg_100k_removals_min_fields {
  addition_date: timestamp
  addition_reasons: String
  affinity_bloc: String
  country: String
  global_status_of_evangelical_christianity: Int
  id: bigint
  language: String
  peid: bigint
  people_cluster: String
  people_group: String
  population: bigint
  religion: String
}

"""
Ordering options when selecting data from "gsec_listing_of_uupg_100k_removals".
"""
input gsec_listing_of_uupg_100k_removals_order_by {
  addition_date: order_by
  addition_reasons: order_by
  affinity_bloc: order_by
  country: order_by
  global_status_of_evangelical_christianity: order_by
  id: order_by
  language: order_by
  peid: order_by
  people_cluster: order_by
  people_group: order_by
  population: order_by
  religion: order_by
}

"""
select columns of table "gsec_listing_of_uupg_100k_removals"
"""
enum gsec_listing_of_uupg_100k_removals_select_column {
  """column name"""
  addition_date

  """column name"""
  addition_reasons

  """column name"""
  affinity_bloc

  """column name"""
  country

  """column name"""
  global_status_of_evangelical_christianity

  """column name"""
  id

  """column name"""
  language

  """column name"""
  peid

  """column name"""
  people_cluster

  """column name"""
  people_group

  """column name"""
  population

  """column name"""
  religion
}

"""aggregate stddev on columns"""
type gsec_listing_of_uupg_100k_removals_stddev_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  peid: Float
  population: Float
}

"""aggregate stddev_pop on columns"""
type gsec_listing_of_uupg_100k_removals_stddev_pop_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  peid: Float
  population: Float
}

"""aggregate stddev_samp on columns"""
type gsec_listing_of_uupg_100k_removals_stddev_samp_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  peid: Float
  population: Float
}

"""
Streaming cursor of the table "gsec_listing_of_uupg_100k_removals"
"""
input gsec_listing_of_uupg_100k_removals_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: gsec_listing_of_uupg_100k_removals_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input gsec_listing_of_uupg_100k_removals_stream_cursor_value_input {
  addition_date: timestamp
  addition_reasons: String
  affinity_bloc: String
  country: String
  global_status_of_evangelical_christianity: Int
  id: bigint
  language: String
  peid: bigint
  people_cluster: String
  people_group: String
  population: bigint
  religion: String
}

"""aggregate sum on columns"""
type gsec_listing_of_uupg_100k_removals_sum_fields {
  global_status_of_evangelical_christianity: Int
  id: bigint
  peid: bigint
  population: bigint
}

"""aggregate var_pop on columns"""
type gsec_listing_of_uupg_100k_removals_var_pop_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  peid: Float
  population: Float
}

"""aggregate var_samp on columns"""
type gsec_listing_of_uupg_100k_removals_var_samp_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  peid: Float
  population: Float
}

"""aggregate variance on columns"""
type gsec_listing_of_uupg_100k_removals_variance_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  peid: Float
  population: Float
}

"""
select columns of table "gsec_listing_of_uupg_100k"
"""
enum gsec_listing_of_uupg_100k_select_column {
  """column name"""
  addition

  """column name"""
  addition_date

  """column name"""
  addition_reasons

  """column name"""
  affinity_bloc

  """column name"""
  audio_scripture

  """column name"""
  continent

  """column name"""
  country

  """column name"""
  country_of_origin

  """column name"""
  dispersed

  """column name"""
  fips

  """column name"""
  fips_of_origin

  """column name"""
  freedom_index

  """column name"""
  genc

  """column name"""
  global_status_of_evangelical_christianity

  """column name"""
  gospel_films

  """column name"""
  gospel_recording

  """column name"""
  government_restrictions_index

  """column name"""
  id

  """column name"""
  imb_affinity_group

  """column name"""
  jesus_film

  """column name"""
  language

  """column name"""
  latitude

  """column name"""
  longitude

  """column name"""
  nomadic

  """column name"""
  nomadic_description

  """column name"""
  nomadic_type

  """column name"""
  not_engaged_anywhere

  """column name"""
  peid

  """column name"""
  people_cluster

  """column name"""
  people_group

  """column name"""
  people_name

  """column name"""
  physical_exertion

  """column name"""
  population

  """column name"""
  published_scripture

  """column name"""
  radio_broadcast

  """column name"""
  religion

  """column name"""
  resources

  """column name"""
  rol

  """column name"""
  rop1

  """column name"""
  rop2

  """column name"""
  rop3

  """column name"""
  social_hostilities_index

  """column name"""
  spi

  """column name"""
  strategic_priority_index

  """column name"""
  sub_continent

  """column name"""
  the_hope

  """column name"""
  threat_level
}

"""aggregate stddev on columns"""
type gsec_listing_of_uupg_100k_stddev_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""aggregate stddev_pop on columns"""
type gsec_listing_of_uupg_100k_stddev_pop_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""aggregate stddev_samp on columns"""
type gsec_listing_of_uupg_100k_stddev_samp_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""
Streaming cursor of the table "gsec_listing_of_uupg_100k"
"""
input gsec_listing_of_uupg_100k_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: gsec_listing_of_uupg_100k_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input gsec_listing_of_uupg_100k_stream_cursor_value_input {
  addition: Boolean
  addition_date: timestamp
  addition_reasons: String
  affinity_bloc: String
  audio_scripture: Boolean
  continent: String
  country: String
  country_of_origin: String
  dispersed: Boolean
  fips: String
  fips_of_origin: String
  freedom_index: String
  genc: String
  global_status_of_evangelical_christianity: Int
  gospel_films: Boolean
  gospel_recording: Boolean
  government_restrictions_index: String
  id: bigint
  imb_affinity_group: String
  jesus_film: Boolean
  language: String
  latitude: String
  longitude: String
  nomadic: Boolean
  nomadic_description: String
  nomadic_type: Int
  not_engaged_anywhere: String
  peid: bigint
  people_cluster: String
  people_group: String
  people_name: String
  physical_exertion: String
  population: bigint
  published_scripture: Boolean
  radio_broadcast: Boolean
  religion: String
  resources: Int
  rol: String
  rop1: String
  rop2: String
  rop3: Int
  social_hostilities_index: String
  spi: Int
  strategic_priority_index: String
  sub_continent: String
  the_hope: Boolean
  threat_level: String
}

"""aggregate sum on columns"""
type gsec_listing_of_uupg_100k_sum_fields {
  global_status_of_evangelical_christianity: Int
  id: bigint
  nomadic_type: Int
  peid: bigint
  population: bigint
  resources: Int
  rop3: Int
  spi: Int
}

"""aggregate var_pop on columns"""
type gsec_listing_of_uupg_100k_var_pop_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""aggregate var_samp on columns"""
type gsec_listing_of_uupg_100k_var_samp_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""aggregate variance on columns"""
type gsec_listing_of_uupg_100k_variance_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""
columns and relationships of "iso_639_2"
"""
type iso_639_2 {
  english_name: String
  entry_type: iso_639_2_entry_type
  french_name: String
  german_name: String
  id: bigint!
  iso_639_1: String
  iso_639_2: String
}

"""
aggregated selection of "iso_639_2"
"""
type iso_639_2_aggregate {
  aggregate: iso_639_2_aggregate_fields
  nodes: [iso_639_2!]!
}

"""
aggregate fields of "iso_639_2"
"""
type iso_639_2_aggregate_fields {
  avg: iso_639_2_avg_fields
  count(columns: [iso_639_2_select_column!], distinct: Boolean): Int!
  max: iso_639_2_max_fields
  min: iso_639_2_min_fields
  stddev: iso_639_2_stddev_fields
  stddev_pop: iso_639_2_stddev_pop_fields
  stddev_samp: iso_639_2_stddev_samp_fields
  sum: iso_639_2_sum_fields
  var_pop: iso_639_2_var_pop_fields
  var_samp: iso_639_2_var_samp_fields
  variance: iso_639_2_variance_fields
}

"""aggregate avg on columns"""
type iso_639_2_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "iso_639_2". All fields are combined with a logical 'AND'.
"""
input iso_639_2_bool_exp {
  _and: [iso_639_2_bool_exp!]
  _not: iso_639_2_bool_exp
  _or: [iso_639_2_bool_exp!]
  english_name: String_comparison_exp
  entry_type: iso_639_2_entry_type_comparison_exp
  french_name: String_comparison_exp
  german_name: String_comparison_exp
  id: bigint_comparison_exp
  iso_639_1: String_comparison_exp
  iso_639_2: String_comparison_exp
}

scalar iso_639_2_entry_type

"""
Boolean expression to compare columns of type "iso_639_2_entry_type". All fields are combined with logical 'AND'.
"""
input iso_639_2_entry_type_comparison_exp {
  _eq: iso_639_2_entry_type
  _gt: iso_639_2_entry_type
  _gte: iso_639_2_entry_type
  _in: [iso_639_2_entry_type!]
  _is_null: Boolean
  _lt: iso_639_2_entry_type
  _lte: iso_639_2_entry_type
  _neq: iso_639_2_entry_type
  _nin: [iso_639_2_entry_type!]
}

"""aggregate max on columns"""
type iso_639_2_max_fields {
  english_name: String
  entry_type: iso_639_2_entry_type
  french_name: String
  german_name: String
  id: bigint
  iso_639_1: String
  iso_639_2: String
}

"""aggregate min on columns"""
type iso_639_2_min_fields {
  english_name: String
  entry_type: iso_639_2_entry_type
  french_name: String
  german_name: String
  id: bigint
  iso_639_1: String
  iso_639_2: String
}

"""Ordering options when selecting data from "iso_639_2"."""
input iso_639_2_order_by {
  english_name: order_by
  entry_type: order_by
  french_name: order_by
  german_name: order_by
  id: order_by
  iso_639_1: order_by
  iso_639_2: order_by
}

"""
select columns of table "iso_639_2"
"""
enum iso_639_2_select_column {
  """column name"""
  english_name

  """column name"""
  entry_type

  """column name"""
  french_name

  """column name"""
  german_name

  """column name"""
  id

  """column name"""
  iso_639_1

  """column name"""
  iso_639_2
}

"""aggregate stddev on columns"""
type iso_639_2_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type iso_639_2_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type iso_639_2_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "iso_639_2"
"""
input iso_639_2_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: iso_639_2_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input iso_639_2_stream_cursor_value_input {
  english_name: String
  entry_type: iso_639_2_entry_type
  french_name: String
  german_name: String
  id: bigint
  iso_639_1: String
  iso_639_2: String
}

"""aggregate sum on columns"""
type iso_639_2_sum_fields {
  id: bigint
}

"""aggregate var_pop on columns"""
type iso_639_2_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type iso_639_2_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type iso_639_2_variance_fields {
  id: Float
}

"""
columns and relationships of "iso_639_3"
"""
type iso_639_3 {
  comment: String
  entry_type: iso_639_3_entry_type!
  id: bigint!
  iso_639_3: String!
  part_1: String
  part_2b: String
  part_2t: String
  ref_name: String!
  scope: iso_639_3_scope_type!
}

"""
aggregated selection of "iso_639_3"
"""
type iso_639_3_aggregate {
  aggregate: iso_639_3_aggregate_fields
  nodes: [iso_639_3!]!
}

"""
aggregate fields of "iso_639_3"
"""
type iso_639_3_aggregate_fields {
  avg: iso_639_3_avg_fields
  count(columns: [iso_639_3_select_column!], distinct: Boolean): Int!
  max: iso_639_3_max_fields
  min: iso_639_3_min_fields
  stddev: iso_639_3_stddev_fields
  stddev_pop: iso_639_3_stddev_pop_fields
  stddev_samp: iso_639_3_stddev_samp_fields
  sum: iso_639_3_sum_fields
  var_pop: iso_639_3_var_pop_fields
  var_samp: iso_639_3_var_samp_fields
  variance: iso_639_3_variance_fields
}

"""aggregate avg on columns"""
type iso_639_3_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "iso_639_3". All fields are combined with a logical 'AND'.
"""
input iso_639_3_bool_exp {
  _and: [iso_639_3_bool_exp!]
  _not: iso_639_3_bool_exp
  _or: [iso_639_3_bool_exp!]
  comment: String_comparison_exp
  entry_type: iso_639_3_entry_type_comparison_exp
  id: bigint_comparison_exp
  iso_639_3: String_comparison_exp
  part_1: String_comparison_exp
  part_2b: String_comparison_exp
  part_2t: String_comparison_exp
  ref_name: String_comparison_exp
  scope: iso_639_3_scope_type_comparison_exp
}

scalar iso_639_3_entry_type

"""
Boolean expression to compare columns of type "iso_639_3_entry_type". All fields are combined with logical 'AND'.
"""
input iso_639_3_entry_type_comparison_exp {
  _eq: iso_639_3_entry_type
  _gt: iso_639_3_entry_type
  _gte: iso_639_3_entry_type
  _in: [iso_639_3_entry_type!]
  _is_null: Boolean
  _lt: iso_639_3_entry_type
  _lte: iso_639_3_entry_type
  _neq: iso_639_3_entry_type
  _nin: [iso_639_3_entry_type!]
}

"""
columns and relationships of "iso_639_3_macrolanguages"
"""
type iso_639_3_macrolanguages {
  i_id: String!
  i_status: iso_639_3_status_type!
  id: bigint!
  m_id: String!
}

"""
aggregated selection of "iso_639_3_macrolanguages"
"""
type iso_639_3_macrolanguages_aggregate {
  aggregate: iso_639_3_macrolanguages_aggregate_fields
  nodes: [iso_639_3_macrolanguages!]!
}

"""
aggregate fields of "iso_639_3_macrolanguages"
"""
type iso_639_3_macrolanguages_aggregate_fields {
  avg: iso_639_3_macrolanguages_avg_fields
  count(columns: [iso_639_3_macrolanguages_select_column!], distinct: Boolean): Int!
  max: iso_639_3_macrolanguages_max_fields
  min: iso_639_3_macrolanguages_min_fields
  stddev: iso_639_3_macrolanguages_stddev_fields
  stddev_pop: iso_639_3_macrolanguages_stddev_pop_fields
  stddev_samp: iso_639_3_macrolanguages_stddev_samp_fields
  sum: iso_639_3_macrolanguages_sum_fields
  var_pop: iso_639_3_macrolanguages_var_pop_fields
  var_samp: iso_639_3_macrolanguages_var_samp_fields
  variance: iso_639_3_macrolanguages_variance_fields
}

"""aggregate avg on columns"""
type iso_639_3_macrolanguages_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "iso_639_3_macrolanguages". All fields are combined with a logical 'AND'.
"""
input iso_639_3_macrolanguages_bool_exp {
  _and: [iso_639_3_macrolanguages_bool_exp!]
  _not: iso_639_3_macrolanguages_bool_exp
  _or: [iso_639_3_macrolanguages_bool_exp!]
  i_id: String_comparison_exp
  i_status: iso_639_3_status_type_comparison_exp
  id: bigint_comparison_exp
  m_id: String_comparison_exp
}

"""aggregate max on columns"""
type iso_639_3_macrolanguages_max_fields {
  i_id: String
  i_status: iso_639_3_status_type
  id: bigint
  m_id: String
}

"""aggregate min on columns"""
type iso_639_3_macrolanguages_min_fields {
  i_id: String
  i_status: iso_639_3_status_type
  id: bigint
  m_id: String
}

"""Ordering options when selecting data from "iso_639_3_macrolanguages"."""
input iso_639_3_macrolanguages_order_by {
  i_id: order_by
  i_status: order_by
  id: order_by
  m_id: order_by
}

"""
select columns of table "iso_639_3_macrolanguages"
"""
enum iso_639_3_macrolanguages_select_column {
  """column name"""
  i_id

  """column name"""
  i_status

  """column name"""
  id

  """column name"""
  m_id
}

"""aggregate stddev on columns"""
type iso_639_3_macrolanguages_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type iso_639_3_macrolanguages_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type iso_639_3_macrolanguages_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "iso_639_3_macrolanguages"
"""
input iso_639_3_macrolanguages_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: iso_639_3_macrolanguages_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input iso_639_3_macrolanguages_stream_cursor_value_input {
  i_id: String
  i_status: iso_639_3_status_type
  id: bigint
  m_id: String
}

"""aggregate sum on columns"""
type iso_639_3_macrolanguages_sum_fields {
  id: bigint
}

"""aggregate var_pop on columns"""
type iso_639_3_macrolanguages_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type iso_639_3_macrolanguages_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type iso_639_3_macrolanguages_variance_fields {
  id: Float
}

"""aggregate max on columns"""
type iso_639_3_max_fields {
  comment: String
  entry_type: iso_639_3_entry_type
  id: bigint
  iso_639_3: String
  part_1: String
  part_2b: String
  part_2t: String
  ref_name: String
  scope: iso_639_3_scope_type
}

"""aggregate min on columns"""
type iso_639_3_min_fields {
  comment: String
  entry_type: iso_639_3_entry_type
  id: bigint
  iso_639_3: String
  part_1: String
  part_2b: String
  part_2t: String
  ref_name: String
  scope: iso_639_3_scope_type
}

"""
columns and relationships of "iso_639_3_names"
"""
type iso_639_3_names {
  id: bigint!
  inverted_name: String!
  iso_639_3: String!
  print_name: String!
}

"""
aggregated selection of "iso_639_3_names"
"""
type iso_639_3_names_aggregate {
  aggregate: iso_639_3_names_aggregate_fields
  nodes: [iso_639_3_names!]!
}

"""
aggregate fields of "iso_639_3_names"
"""
type iso_639_3_names_aggregate_fields {
  avg: iso_639_3_names_avg_fields
  count(columns: [iso_639_3_names_select_column!], distinct: Boolean): Int!
  max: iso_639_3_names_max_fields
  min: iso_639_3_names_min_fields
  stddev: iso_639_3_names_stddev_fields
  stddev_pop: iso_639_3_names_stddev_pop_fields
  stddev_samp: iso_639_3_names_stddev_samp_fields
  sum: iso_639_3_names_sum_fields
  var_pop: iso_639_3_names_var_pop_fields
  var_samp: iso_639_3_names_var_samp_fields
  variance: iso_639_3_names_variance_fields
}

"""aggregate avg on columns"""
type iso_639_3_names_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "iso_639_3_names". All fields are combined with a logical 'AND'.
"""
input iso_639_3_names_bool_exp {
  _and: [iso_639_3_names_bool_exp!]
  _not: iso_639_3_names_bool_exp
  _or: [iso_639_3_names_bool_exp!]
  id: bigint_comparison_exp
  inverted_name: String_comparison_exp
  iso_639_3: String_comparison_exp
  print_name: String_comparison_exp
}

"""aggregate max on columns"""
type iso_639_3_names_max_fields {
  id: bigint
  inverted_name: String
  iso_639_3: String
  print_name: String
}

"""aggregate min on columns"""
type iso_639_3_names_min_fields {
  id: bigint
  inverted_name: String
  iso_639_3: String
  print_name: String
}

"""Ordering options when selecting data from "iso_639_3_names"."""
input iso_639_3_names_order_by {
  id: order_by
  inverted_name: order_by
  iso_639_3: order_by
  print_name: order_by
}

"""
select columns of table "iso_639_3_names"
"""
enum iso_639_3_names_select_column {
  """column name"""
  id

  """column name"""
  inverted_name

  """column name"""
  iso_639_3

  """column name"""
  print_name
}

"""aggregate stddev on columns"""
type iso_639_3_names_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type iso_639_3_names_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type iso_639_3_names_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "iso_639_3_names"
"""
input iso_639_3_names_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: iso_639_3_names_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input iso_639_3_names_stream_cursor_value_input {
  id: bigint
  inverted_name: String
  iso_639_3: String
  print_name: String
}

"""aggregate sum on columns"""
type iso_639_3_names_sum_fields {
  id: bigint
}

"""aggregate var_pop on columns"""
type iso_639_3_names_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type iso_639_3_names_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type iso_639_3_names_variance_fields {
  id: Float
}

"""Ordering options when selecting data from "iso_639_3"."""
input iso_639_3_order_by {
  comment: order_by
  entry_type: order_by
  id: order_by
  iso_639_3: order_by
  part_1: order_by
  part_2b: order_by
  part_2t: order_by
  ref_name: order_by
  scope: order_by
}

scalar iso_639_3_retirement_reason_options

"""
Boolean expression to compare columns of type "iso_639_3_retirement_reason_options". All fields are combined with logical 'AND'.
"""
input iso_639_3_retirement_reason_options_comparison_exp {
  _eq: iso_639_3_retirement_reason_options
  _gt: iso_639_3_retirement_reason_options
  _gte: iso_639_3_retirement_reason_options
  _in: [iso_639_3_retirement_reason_options!]
  _is_null: Boolean
  _lt: iso_639_3_retirement_reason_options
  _lte: iso_639_3_retirement_reason_options
  _neq: iso_639_3_retirement_reason_options
  _nin: [iso_639_3_retirement_reason_options!]
}

"""
columns and relationships of "iso_639_3_retirements"
"""
type iso_639_3_retirements {
  change_to: String
  effective: timestamp!
  id: bigint!
  iso_639_3: String!
  ref_name: String!
  ret_reason: iso_639_3_retirement_reason_options
  ret_remedy: String
}

"""
aggregated selection of "iso_639_3_retirements"
"""
type iso_639_3_retirements_aggregate {
  aggregate: iso_639_3_retirements_aggregate_fields
  nodes: [iso_639_3_retirements!]!
}

"""
aggregate fields of "iso_639_3_retirements"
"""
type iso_639_3_retirements_aggregate_fields {
  avg: iso_639_3_retirements_avg_fields
  count(columns: [iso_639_3_retirements_select_column!], distinct: Boolean): Int!
  max: iso_639_3_retirements_max_fields
  min: iso_639_3_retirements_min_fields
  stddev: iso_639_3_retirements_stddev_fields
  stddev_pop: iso_639_3_retirements_stddev_pop_fields
  stddev_samp: iso_639_3_retirements_stddev_samp_fields
  sum: iso_639_3_retirements_sum_fields
  var_pop: iso_639_3_retirements_var_pop_fields
  var_samp: iso_639_3_retirements_var_samp_fields
  variance: iso_639_3_retirements_variance_fields
}

"""aggregate avg on columns"""
type iso_639_3_retirements_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "iso_639_3_retirements". All fields are combined with a logical 'AND'.
"""
input iso_639_3_retirements_bool_exp {
  _and: [iso_639_3_retirements_bool_exp!]
  _not: iso_639_3_retirements_bool_exp
  _or: [iso_639_3_retirements_bool_exp!]
  change_to: String_comparison_exp
  effective: timestamp_comparison_exp
  id: bigint_comparison_exp
  iso_639_3: String_comparison_exp
  ref_name: String_comparison_exp
  ret_reason: iso_639_3_retirement_reason_options_comparison_exp
  ret_remedy: String_comparison_exp
}

"""aggregate max on columns"""
type iso_639_3_retirements_max_fields {
  change_to: String
  effective: timestamp
  id: bigint
  iso_639_3: String
  ref_name: String
  ret_reason: iso_639_3_retirement_reason_options
  ret_remedy: String
}

"""aggregate min on columns"""
type iso_639_3_retirements_min_fields {
  change_to: String
  effective: timestamp
  id: bigint
  iso_639_3: String
  ref_name: String
  ret_reason: iso_639_3_retirement_reason_options
  ret_remedy: String
}

"""Ordering options when selecting data from "iso_639_3_retirements"."""
input iso_639_3_retirements_order_by {
  change_to: order_by
  effective: order_by
  id: order_by
  iso_639_3: order_by
  ref_name: order_by
  ret_reason: order_by
  ret_remedy: order_by
}

"""
select columns of table "iso_639_3_retirements"
"""
enum iso_639_3_retirements_select_column {
  """column name"""
  change_to

  """column name"""
  effective

  """column name"""
  id

  """column name"""
  iso_639_3

  """column name"""
  ref_name

  """column name"""
  ret_reason

  """column name"""
  ret_remedy
}

"""aggregate stddev on columns"""
type iso_639_3_retirements_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type iso_639_3_retirements_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type iso_639_3_retirements_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "iso_639_3_retirements"
"""
input iso_639_3_retirements_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: iso_639_3_retirements_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input iso_639_3_retirements_stream_cursor_value_input {
  change_to: String
  effective: timestamp
  id: bigint
  iso_639_3: String
  ref_name: String
  ret_reason: iso_639_3_retirement_reason_options
  ret_remedy: String
}

"""aggregate sum on columns"""
type iso_639_3_retirements_sum_fields {
  id: bigint
}

"""aggregate var_pop on columns"""
type iso_639_3_retirements_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type iso_639_3_retirements_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type iso_639_3_retirements_variance_fields {
  id: Float
}

scalar iso_639_3_scope_type

"""
Boolean expression to compare columns of type "iso_639_3_scope_type". All fields are combined with logical 'AND'.
"""
input iso_639_3_scope_type_comparison_exp {
  _eq: iso_639_3_scope_type
  _gt: iso_639_3_scope_type
  _gte: iso_639_3_scope_type
  _in: [iso_639_3_scope_type!]
  _is_null: Boolean
  _lt: iso_639_3_scope_type
  _lte: iso_639_3_scope_type
  _neq: iso_639_3_scope_type
  _nin: [iso_639_3_scope_type!]
}

"""
select columns of table "iso_639_3"
"""
enum iso_639_3_select_column {
  """column name"""
  comment

  """column name"""
  entry_type

  """column name"""
  id

  """column name"""
  iso_639_3

  """column name"""
  part_1

  """column name"""
  part_2b

  """column name"""
  part_2t

  """column name"""
  ref_name

  """column name"""
  scope
}

scalar iso_639_3_status_type

"""
Boolean expression to compare columns of type "iso_639_3_status_type". All fields are combined with logical 'AND'.
"""
input iso_639_3_status_type_comparison_exp {
  _eq: iso_639_3_status_type
  _gt: iso_639_3_status_type
  _gte: iso_639_3_status_type
  _in: [iso_639_3_status_type!]
  _is_null: Boolean
  _lt: iso_639_3_status_type
  _lte: iso_639_3_status_type
  _neq: iso_639_3_status_type
  _nin: [iso_639_3_status_type!]
}

"""aggregate stddev on columns"""
type iso_639_3_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type iso_639_3_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type iso_639_3_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "iso_639_3"
"""
input iso_639_3_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: iso_639_3_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input iso_639_3_stream_cursor_value_input {
  comment: String
  entry_type: iso_639_3_entry_type
  id: bigint
  iso_639_3: String
  part_1: String
  part_2b: String
  part_2t: String
  ref_name: String
  scope: iso_639_3_scope_type
}

"""aggregate sum on columns"""
type iso_639_3_sum_fields {
  id: bigint
}

"""aggregate var_pop on columns"""
type iso_639_3_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type iso_639_3_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type iso_639_3_variance_fields {
  id: Float
}

"""
columns and relationships of "iso_639_5"
"""
type iso_639_5 {
  english_name: String
  french_name: String
  hierarchy: String
  id: bigint!
  identifier: String!
  iso_639_2: String
  notes: String
}

"""
aggregated selection of "iso_639_5"
"""
type iso_639_5_aggregate {
  aggregate: iso_639_5_aggregate_fields
  nodes: [iso_639_5!]!
}

"""
aggregate fields of "iso_639_5"
"""
type iso_639_5_aggregate_fields {
  avg: iso_639_5_avg_fields
  count(columns: [iso_639_5_select_column!], distinct: Boolean): Int!
  max: iso_639_5_max_fields
  min: iso_639_5_min_fields
  stddev: iso_639_5_stddev_fields
  stddev_pop: iso_639_5_stddev_pop_fields
  stddev_samp: iso_639_5_stddev_samp_fields
  sum: iso_639_5_sum_fields
  var_pop: iso_639_5_var_pop_fields
  var_samp: iso_639_5_var_samp_fields
  variance: iso_639_5_variance_fields
}

"""aggregate avg on columns"""
type iso_639_5_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "iso_639_5". All fields are combined with a logical 'AND'.
"""
input iso_639_5_bool_exp {
  _and: [iso_639_5_bool_exp!]
  _not: iso_639_5_bool_exp
  _or: [iso_639_5_bool_exp!]
  english_name: String_comparison_exp
  french_name: String_comparison_exp
  hierarchy: String_comparison_exp
  id: bigint_comparison_exp
  identifier: String_comparison_exp
  iso_639_2: String_comparison_exp
  notes: String_comparison_exp
}

"""aggregate max on columns"""
type iso_639_5_max_fields {
  english_name: String
  french_name: String
  hierarchy: String
  id: bigint
  identifier: String
  iso_639_2: String
  notes: String
}

"""aggregate min on columns"""
type iso_639_5_min_fields {
  english_name: String
  french_name: String
  hierarchy: String
  id: bigint
  identifier: String
  iso_639_2: String
  notes: String
}

"""Ordering options when selecting data from "iso_639_5"."""
input iso_639_5_order_by {
  english_name: order_by
  french_name: order_by
  hierarchy: order_by
  id: order_by
  identifier: order_by
  iso_639_2: order_by
  notes: order_by
}

"""
select columns of table "iso_639_5"
"""
enum iso_639_5_select_column {
  """column name"""
  english_name

  """column name"""
  french_name

  """column name"""
  hierarchy

  """column name"""
  id

  """column name"""
  identifier

  """column name"""
  iso_639_2

  """column name"""
  notes
}

"""aggregate stddev on columns"""
type iso_639_5_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type iso_639_5_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type iso_639_5_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "iso_639_5"
"""
input iso_639_5_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: iso_639_5_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input iso_639_5_stream_cursor_value_input {
  english_name: String
  french_name: String
  hierarchy: String
  id: bigint
  identifier: String
  iso_639_2: String
  notes: String
}

"""aggregate sum on columns"""
type iso_639_5_sum_fields {
  id: bigint
}

"""aggregate var_pop on columns"""
type iso_639_5_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type iso_639_5_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type iso_639_5_variance_fields {
  id: Float
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "people_groups_data_only"
"""
type people_groups_data_only {
  affinity_bloc: String
  audio_scripture: Boolean
  continent: String
  country: String
  country_of_origin: String
  dispersed: Boolean
  evangelical_engagement: Boolean
  fips: String
  fips_of_origin: String
  freedom_index: String
  genc: String
  global_status_of_evangelical_christianity: Int
  gospel_films: Boolean
  gospel_recording: Boolean
  government_restrictions_index: String
  id: bigint!
  imb_affinity_group: String
  jesus_film: Boolean
  language: String
  latitude: String
  longitude: String
  nomadic: Boolean
  nomadic_description: String
  nomadic_type: Int
  not_engaged_anywhere: String
  peid: bigint
  people_cluster: String
  people_group: String
  people_name: String
  physical_exertion: String
  population: bigint
  population_layer: String
  radio_broadcast: Boolean
  religion: String
  resources: Int
  rol: String
  rop1: String
  rop2: String
  rop3: Int
  social_hostilities_index: String
  spi: Int
  strategic_priority_index: String
  sub_continent: String
  the_hope: Boolean
  threat_level: String
  written_scripture: Boolean
}

"""
aggregated selection of "people_groups_data_only"
"""
type people_groups_data_only_aggregate {
  aggregate: people_groups_data_only_aggregate_fields
  nodes: [people_groups_data_only!]!
}

"""
aggregate fields of "people_groups_data_only"
"""
type people_groups_data_only_aggregate_fields {
  avg: people_groups_data_only_avg_fields
  count(columns: [people_groups_data_only_select_column!], distinct: Boolean): Int!
  max: people_groups_data_only_max_fields
  min: people_groups_data_only_min_fields
  stddev: people_groups_data_only_stddev_fields
  stddev_pop: people_groups_data_only_stddev_pop_fields
  stddev_samp: people_groups_data_only_stddev_samp_fields
  sum: people_groups_data_only_sum_fields
  var_pop: people_groups_data_only_var_pop_fields
  var_samp: people_groups_data_only_var_samp_fields
  variance: people_groups_data_only_variance_fields
}

"""aggregate avg on columns"""
type people_groups_data_only_avg_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""
Boolean expression to filter rows from the table "people_groups_data_only". All fields are combined with a logical 'AND'.
"""
input people_groups_data_only_bool_exp {
  _and: [people_groups_data_only_bool_exp!]
  _not: people_groups_data_only_bool_exp
  _or: [people_groups_data_only_bool_exp!]
  affinity_bloc: String_comparison_exp
  audio_scripture: Boolean_comparison_exp
  continent: String_comparison_exp
  country: String_comparison_exp
  country_of_origin: String_comparison_exp
  dispersed: Boolean_comparison_exp
  evangelical_engagement: Boolean_comparison_exp
  fips: String_comparison_exp
  fips_of_origin: String_comparison_exp
  freedom_index: String_comparison_exp
  genc: String_comparison_exp
  global_status_of_evangelical_christianity: Int_comparison_exp
  gospel_films: Boolean_comparison_exp
  gospel_recording: Boolean_comparison_exp
  government_restrictions_index: String_comparison_exp
  id: bigint_comparison_exp
  imb_affinity_group: String_comparison_exp
  jesus_film: Boolean_comparison_exp
  language: String_comparison_exp
  latitude: String_comparison_exp
  longitude: String_comparison_exp
  nomadic: Boolean_comparison_exp
  nomadic_description: String_comparison_exp
  nomadic_type: Int_comparison_exp
  not_engaged_anywhere: String_comparison_exp
  peid: bigint_comparison_exp
  people_cluster: String_comparison_exp
  people_group: String_comparison_exp
  people_name: String_comparison_exp
  physical_exertion: String_comparison_exp
  population: bigint_comparison_exp
  population_layer: String_comparison_exp
  radio_broadcast: Boolean_comparison_exp
  religion: String_comparison_exp
  resources: Int_comparison_exp
  rol: String_comparison_exp
  rop1: String_comparison_exp
  rop2: String_comparison_exp
  rop3: Int_comparison_exp
  social_hostilities_index: String_comparison_exp
  spi: Int_comparison_exp
  strategic_priority_index: String_comparison_exp
  sub_continent: String_comparison_exp
  the_hope: Boolean_comparison_exp
  threat_level: String_comparison_exp
  written_scripture: Boolean_comparison_exp
}

"""aggregate max on columns"""
type people_groups_data_only_max_fields {
  affinity_bloc: String
  continent: String
  country: String
  country_of_origin: String
  fips: String
  fips_of_origin: String
  freedom_index: String
  genc: String
  global_status_of_evangelical_christianity: Int
  government_restrictions_index: String
  id: bigint
  imb_affinity_group: String
  language: String
  latitude: String
  longitude: String
  nomadic_description: String
  nomadic_type: Int
  not_engaged_anywhere: String
  peid: bigint
  people_cluster: String
  people_group: String
  people_name: String
  physical_exertion: String
  population: bigint
  population_layer: String
  religion: String
  resources: Int
  rol: String
  rop1: String
  rop2: String
  rop3: Int
  social_hostilities_index: String
  spi: Int
  strategic_priority_index: String
  sub_continent: String
  threat_level: String
}

"""aggregate min on columns"""
type people_groups_data_only_min_fields {
  affinity_bloc: String
  continent: String
  country: String
  country_of_origin: String
  fips: String
  fips_of_origin: String
  freedom_index: String
  genc: String
  global_status_of_evangelical_christianity: Int
  government_restrictions_index: String
  id: bigint
  imb_affinity_group: String
  language: String
  latitude: String
  longitude: String
  nomadic_description: String
  nomadic_type: Int
  not_engaged_anywhere: String
  peid: bigint
  people_cluster: String
  people_group: String
  people_name: String
  physical_exertion: String
  population: bigint
  population_layer: String
  religion: String
  resources: Int
  rol: String
  rop1: String
  rop2: String
  rop3: Int
  social_hostilities_index: String
  spi: Int
  strategic_priority_index: String
  sub_continent: String
  threat_level: String
}

"""Ordering options when selecting data from "people_groups_data_only"."""
input people_groups_data_only_order_by {
  affinity_bloc: order_by
  audio_scripture: order_by
  continent: order_by
  country: order_by
  country_of_origin: order_by
  dispersed: order_by
  evangelical_engagement: order_by
  fips: order_by
  fips_of_origin: order_by
  freedom_index: order_by
  genc: order_by
  global_status_of_evangelical_christianity: order_by
  gospel_films: order_by
  gospel_recording: order_by
  government_restrictions_index: order_by
  id: order_by
  imb_affinity_group: order_by
  jesus_film: order_by
  language: order_by
  latitude: order_by
  longitude: order_by
  nomadic: order_by
  nomadic_description: order_by
  nomadic_type: order_by
  not_engaged_anywhere: order_by
  peid: order_by
  people_cluster: order_by
  people_group: order_by
  people_name: order_by
  physical_exertion: order_by
  population: order_by
  population_layer: order_by
  radio_broadcast: order_by
  religion: order_by
  resources: order_by
  rol: order_by
  rop1: order_by
  rop2: order_by
  rop3: order_by
  social_hostilities_index: order_by
  spi: order_by
  strategic_priority_index: order_by
  sub_continent: order_by
  the_hope: order_by
  threat_level: order_by
  written_scripture: order_by
}

"""
select columns of table "people_groups_data_only"
"""
enum people_groups_data_only_select_column {
  """column name"""
  affinity_bloc

  """column name"""
  audio_scripture

  """column name"""
  continent

  """column name"""
  country

  """column name"""
  country_of_origin

  """column name"""
  dispersed

  """column name"""
  evangelical_engagement

  """column name"""
  fips

  """column name"""
  fips_of_origin

  """column name"""
  freedom_index

  """column name"""
  genc

  """column name"""
  global_status_of_evangelical_christianity

  """column name"""
  gospel_films

  """column name"""
  gospel_recording

  """column name"""
  government_restrictions_index

  """column name"""
  id

  """column name"""
  imb_affinity_group

  """column name"""
  jesus_film

  """column name"""
  language

  """column name"""
  latitude

  """column name"""
  longitude

  """column name"""
  nomadic

  """column name"""
  nomadic_description

  """column name"""
  nomadic_type

  """column name"""
  not_engaged_anywhere

  """column name"""
  peid

  """column name"""
  people_cluster

  """column name"""
  people_group

  """column name"""
  people_name

  """column name"""
  physical_exertion

  """column name"""
  population

  """column name"""
  population_layer

  """column name"""
  radio_broadcast

  """column name"""
  religion

  """column name"""
  resources

  """column name"""
  rol

  """column name"""
  rop1

  """column name"""
  rop2

  """column name"""
  rop3

  """column name"""
  social_hostilities_index

  """column name"""
  spi

  """column name"""
  strategic_priority_index

  """column name"""
  sub_continent

  """column name"""
  the_hope

  """column name"""
  threat_level

  """column name"""
  written_scripture
}

"""aggregate stddev on columns"""
type people_groups_data_only_stddev_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""aggregate stddev_pop on columns"""
type people_groups_data_only_stddev_pop_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""aggregate stddev_samp on columns"""
type people_groups_data_only_stddev_samp_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""
Streaming cursor of the table "people_groups_data_only"
"""
input people_groups_data_only_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: people_groups_data_only_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input people_groups_data_only_stream_cursor_value_input {
  affinity_bloc: String
  audio_scripture: Boolean
  continent: String
  country: String
  country_of_origin: String
  dispersed: Boolean
  evangelical_engagement: Boolean
  fips: String
  fips_of_origin: String
  freedom_index: String
  genc: String
  global_status_of_evangelical_christianity: Int
  gospel_films: Boolean
  gospel_recording: Boolean
  government_restrictions_index: String
  id: bigint
  imb_affinity_group: String
  jesus_film: Boolean
  language: String
  latitude: String
  longitude: String
  nomadic: Boolean
  nomadic_description: String
  nomadic_type: Int
  not_engaged_anywhere: String
  peid: bigint
  people_cluster: String
  people_group: String
  people_name: String
  physical_exertion: String
  population: bigint
  population_layer: String
  radio_broadcast: Boolean
  religion: String
  resources: Int
  rol: String
  rop1: String
  rop2: String
  rop3: Int
  social_hostilities_index: String
  spi: Int
  strategic_priority_index: String
  sub_continent: String
  the_hope: Boolean
  threat_level: String
  written_scripture: Boolean
}

"""aggregate sum on columns"""
type people_groups_data_only_sum_fields {
  global_status_of_evangelical_christianity: Int
  id: bigint
  nomadic_type: Int
  peid: bigint
  population: bigint
  resources: Int
  rop3: Int
  spi: Int
}

"""aggregate var_pop on columns"""
type people_groups_data_only_var_pop_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""aggregate var_samp on columns"""
type people_groups_data_only_var_samp_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""aggregate variance on columns"""
type people_groups_data_only_variance_fields {
  global_status_of_evangelical_christianity: Float
  id: Float
  nomadic_type: Float
  peid: Float
  population: Float
  resources: Float
  rop3: Float
  spi: Float
}

"""
columns and relationships of "progress_bible_language_details"
"""
type progress_bible_language_details {
  code_status: progress_bible_language_details_code_status!
  ethnologue_name: String
  how_to_fix: String
  id: bigint!
  is_sign_language: Boolean
  iso_639_3_code: String
  language_scope: String
  language_status: progress_bible_language_details_language_status!
  primary_continent: String
  primary_country_code: String
  primary_country_name: String
  retired_date: timestamp
  retirement_explanation: String
  show_active_dialect: Boolean
  show_active_language: Boolean
  show_retired_dialect: Boolean
  show_retired_language: Boolean
  show_sign_language: Boolean
  unit_code: String!
  unit_full_name: String!
  unit_name: String!
  unit_type: progress_bible_language_details_unit_type!
}

"""
aggregated selection of "progress_bible_language_details"
"""
type progress_bible_language_details_aggregate {
  aggregate: progress_bible_language_details_aggregate_fields
  nodes: [progress_bible_language_details!]!
}

"""
aggregate fields of "progress_bible_language_details"
"""
type progress_bible_language_details_aggregate_fields {
  avg: progress_bible_language_details_avg_fields
  count(columns: [progress_bible_language_details_select_column!], distinct: Boolean): Int!
  max: progress_bible_language_details_max_fields
  min: progress_bible_language_details_min_fields
  stddev: progress_bible_language_details_stddev_fields
  stddev_pop: progress_bible_language_details_stddev_pop_fields
  stddev_samp: progress_bible_language_details_stddev_samp_fields
  sum: progress_bible_language_details_sum_fields
  var_pop: progress_bible_language_details_var_pop_fields
  var_samp: progress_bible_language_details_var_samp_fields
  variance: progress_bible_language_details_variance_fields
}

"""aggregate avg on columns"""
type progress_bible_language_details_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "progress_bible_language_details". All fields are combined with a logical 'AND'.
"""
input progress_bible_language_details_bool_exp {
  _and: [progress_bible_language_details_bool_exp!]
  _not: progress_bible_language_details_bool_exp
  _or: [progress_bible_language_details_bool_exp!]
  code_status: progress_bible_language_details_code_status_comparison_exp
  ethnologue_name: String_comparison_exp
  how_to_fix: String_comparison_exp
  id: bigint_comparison_exp
  is_sign_language: Boolean_comparison_exp
  iso_639_3_code: String_comparison_exp
  language_scope: String_comparison_exp
  language_status: progress_bible_language_details_language_status_comparison_exp
  primary_continent: String_comparison_exp
  primary_country_code: String_comparison_exp
  primary_country_name: String_comparison_exp
  retired_date: timestamp_comparison_exp
  retirement_explanation: String_comparison_exp
  show_active_dialect: Boolean_comparison_exp
  show_active_language: Boolean_comparison_exp
  show_retired_dialect: Boolean_comparison_exp
  show_retired_language: Boolean_comparison_exp
  show_sign_language: Boolean_comparison_exp
  unit_code: String_comparison_exp
  unit_full_name: String_comparison_exp
  unit_name: String_comparison_exp
  unit_type: progress_bible_language_details_unit_type_comparison_exp
}

scalar progress_bible_language_details_code_status

"""
Boolean expression to compare columns of type "progress_bible_language_details_code_status". All fields are combined with logical 'AND'.
"""
input progress_bible_language_details_code_status_comparison_exp {
  _eq: progress_bible_language_details_code_status
  _gt: progress_bible_language_details_code_status
  _gte: progress_bible_language_details_code_status
  _in: [progress_bible_language_details_code_status!]
  _is_null: Boolean
  _lt: progress_bible_language_details_code_status
  _lte: progress_bible_language_details_code_status
  _neq: progress_bible_language_details_code_status
  _nin: [progress_bible_language_details_code_status!]
}

scalar progress_bible_language_details_language_status

"""
Boolean expression to compare columns of type "progress_bible_language_details_language_status". All fields are combined with logical 'AND'.
"""
input progress_bible_language_details_language_status_comparison_exp {
  _eq: progress_bible_language_details_language_status
  _gt: progress_bible_language_details_language_status
  _gte: progress_bible_language_details_language_status
  _in: [progress_bible_language_details_language_status!]
  _is_null: Boolean
  _lt: progress_bible_language_details_language_status
  _lte: progress_bible_language_details_language_status
  _neq: progress_bible_language_details_language_status
  _nin: [progress_bible_language_details_language_status!]
}

"""aggregate max on columns"""
type progress_bible_language_details_max_fields {
  code_status: progress_bible_language_details_code_status
  ethnologue_name: String
  how_to_fix: String
  id: bigint
  iso_639_3_code: String
  language_scope: String
  language_status: progress_bible_language_details_language_status
  primary_continent: String
  primary_country_code: String
  primary_country_name: String
  retired_date: timestamp
  retirement_explanation: String
  unit_code: String
  unit_full_name: String
  unit_name: String
  unit_type: progress_bible_language_details_unit_type
}

"""aggregate min on columns"""
type progress_bible_language_details_min_fields {
  code_status: progress_bible_language_details_code_status
  ethnologue_name: String
  how_to_fix: String
  id: bigint
  iso_639_3_code: String
  language_scope: String
  language_status: progress_bible_language_details_language_status
  primary_continent: String
  primary_country_code: String
  primary_country_name: String
  retired_date: timestamp
  retirement_explanation: String
  unit_code: String
  unit_full_name: String
  unit_name: String
  unit_type: progress_bible_language_details_unit_type
}

"""
Ordering options when selecting data from "progress_bible_language_details".
"""
input progress_bible_language_details_order_by {
  code_status: order_by
  ethnologue_name: order_by
  how_to_fix: order_by
  id: order_by
  is_sign_language: order_by
  iso_639_3_code: order_by
  language_scope: order_by
  language_status: order_by
  primary_continent: order_by
  primary_country_code: order_by
  primary_country_name: order_by
  retired_date: order_by
  retirement_explanation: order_by
  show_active_dialect: order_by
  show_active_language: order_by
  show_retired_dialect: order_by
  show_retired_language: order_by
  show_sign_language: order_by
  unit_code: order_by
  unit_full_name: order_by
  unit_name: order_by
  unit_type: order_by
}

"""
select columns of table "progress_bible_language_details"
"""
enum progress_bible_language_details_select_column {
  """column name"""
  code_status

  """column name"""
  ethnologue_name

  """column name"""
  how_to_fix

  """column name"""
  id

  """column name"""
  is_sign_language

  """column name"""
  iso_639_3_code

  """column name"""
  language_scope

  """column name"""
  language_status

  """column name"""
  primary_continent

  """column name"""
  primary_country_code

  """column name"""
  primary_country_name

  """column name"""
  retired_date

  """column name"""
  retirement_explanation

  """column name"""
  show_active_dialect

  """column name"""
  show_active_language

  """column name"""
  show_retired_dialect

  """column name"""
  show_retired_language

  """column name"""
  show_sign_language

  """column name"""
  unit_code

  """column name"""
  unit_full_name

  """column name"""
  unit_name

  """column name"""
  unit_type
}

"""aggregate stddev on columns"""
type progress_bible_language_details_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type progress_bible_language_details_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type progress_bible_language_details_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "progress_bible_language_details"
"""
input progress_bible_language_details_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: progress_bible_language_details_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input progress_bible_language_details_stream_cursor_value_input {
  code_status: progress_bible_language_details_code_status
  ethnologue_name: String
  how_to_fix: String
  id: bigint
  is_sign_language: Boolean
  iso_639_3_code: String
  language_scope: String
  language_status: progress_bible_language_details_language_status
  primary_continent: String
  primary_country_code: String
  primary_country_name: String
  retired_date: timestamp
  retirement_explanation: String
  show_active_dialect: Boolean
  show_active_language: Boolean
  show_retired_dialect: Boolean
  show_retired_language: Boolean
  show_sign_language: Boolean
  unit_code: String
  unit_full_name: String
  unit_name: String
  unit_type: progress_bible_language_details_unit_type
}

"""aggregate sum on columns"""
type progress_bible_language_details_sum_fields {
  id: bigint
}

scalar progress_bible_language_details_unit_type

"""
Boolean expression to compare columns of type "progress_bible_language_details_unit_type". All fields are combined with logical 'AND'.
"""
input progress_bible_language_details_unit_type_comparison_exp {
  _eq: progress_bible_language_details_unit_type
  _gt: progress_bible_language_details_unit_type
  _gte: progress_bible_language_details_unit_type
  _in: [progress_bible_language_details_unit_type!]
  _is_null: Boolean
  _lt: progress_bible_language_details_unit_type
  _lte: progress_bible_language_details_unit_type
  _neq: progress_bible_language_details_unit_type
  _nin: [progress_bible_language_details_unit_type!]
}

"""aggregate var_pop on columns"""
type progress_bible_language_details_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type progress_bible_language_details_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type progress_bible_language_details_variance_fields {
  id: Float
}

type query_root {
  """
  fetch data from the table: "glottolog_family"
  """
  glottolog_family(
    """distinct select on columns"""
    distinct_on: [glottolog_family_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [glottolog_family_order_by!]

    """filter the rows returned"""
    where: glottolog_family_bool_exp
  ): [glottolog_family!]!

  """
  fetch aggregated fields from the table: "glottolog_family"
  """
  glottolog_family_aggregate(
    """distinct select on columns"""
    distinct_on: [glottolog_family_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [glottolog_family_order_by!]

    """filter the rows returned"""
    where: glottolog_family_bool_exp
  ): glottolog_family_aggregate!

  """
  fetch data from the table: "glottolog_family" using primary key columns
  """
  glottolog_family_by_pk(id: bigint!): glottolog_family

  """
  fetch data from the table: "glottolog_language"
  """
  glottolog_language(
    """distinct select on columns"""
    distinct_on: [glottolog_language_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [glottolog_language_order_by!]

    """filter the rows returned"""
    where: glottolog_language_bool_exp
  ): [glottolog_language!]!

  """
  fetch aggregated fields from the table: "glottolog_language"
  """
  glottolog_language_aggregate(
    """distinct select on columns"""
    distinct_on: [glottolog_language_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [glottolog_language_order_by!]

    """filter the rows returned"""
    where: glottolog_language_bool_exp
  ): glottolog_language_aggregate!

  """
  fetch data from the table: "glottolog_language" using primary key columns
  """
  glottolog_language_by_pk(id: bigint!): glottolog_language

  """
  fetch data from the table: "gsec_listing_of_people_groups"
  """
  gsec_listing_of_people_groups(
    """distinct select on columns"""
    distinct_on: [gsec_listing_of_people_groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gsec_listing_of_people_groups_order_by!]

    """filter the rows returned"""
    where: gsec_listing_of_people_groups_bool_exp
  ): [gsec_listing_of_people_groups!]!

  """
  fetch aggregated fields from the table: "gsec_listing_of_people_groups"
  """
  gsec_listing_of_people_groups_aggregate(
    """distinct select on columns"""
    distinct_on: [gsec_listing_of_people_groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gsec_listing_of_people_groups_order_by!]

    """filter the rows returned"""
    where: gsec_listing_of_people_groups_bool_exp
  ): gsec_listing_of_people_groups_aggregate!

  """
  fetch data from the table: "gsec_listing_of_people_groups" using primary key columns
  """
  gsec_listing_of_people_groups_by_pk(id: bigint!): gsec_listing_of_people_groups

  """
  fetch data from the table: "gsec_listing_of_unengaged_unreached_people_groups"
  """
  gsec_listing_of_unengaged_unreached_people_groups(
    """distinct select on columns"""
    distinct_on: [gsec_listing_of_unengaged_unreached_people_groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gsec_listing_of_unengaged_unreached_people_groups_order_by!]

    """filter the rows returned"""
    where: gsec_listing_of_unengaged_unreached_people_groups_bool_exp
  ): [gsec_listing_of_unengaged_unreached_people_groups!]!

  """
  fetch aggregated fields from the table: "gsec_listing_of_unengaged_unreached_people_groups"
  """
  gsec_listing_of_unengaged_unreached_people_groups_aggregate(
    """distinct select on columns"""
    distinct_on: [gsec_listing_of_unengaged_unreached_people_groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gsec_listing_of_unengaged_unreached_people_groups_order_by!]

    """filter the rows returned"""
    where: gsec_listing_of_unengaged_unreached_people_groups_bool_exp
  ): gsec_listing_of_unengaged_unreached_people_groups_aggregate!

  """
  fetch data from the table: "gsec_listing_of_unengaged_unreached_people_groups" using primary key columns
  """
  gsec_listing_of_unengaged_unreached_people_groups_by_pk(id: bigint!): gsec_listing_of_unengaged_unreached_people_groups

  """
  fetch data from the table: "gsec_listing_of_unreached_people_groups"
  """
  gsec_listing_of_unreached_people_groups(
    """distinct select on columns"""
    distinct_on: [gsec_listing_of_unreached_people_groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gsec_listing_of_unreached_people_groups_order_by!]

    """filter the rows returned"""
    where: gsec_listing_of_unreached_people_groups_bool_exp
  ): [gsec_listing_of_unreached_people_groups!]!

  """
  fetch aggregated fields from the table: "gsec_listing_of_unreached_people_groups"
  """
  gsec_listing_of_unreached_people_groups_aggregate(
    """distinct select on columns"""
    distinct_on: [gsec_listing_of_unreached_people_groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gsec_listing_of_unreached_people_groups_order_by!]

    """filter the rows returned"""
    where: gsec_listing_of_unreached_people_groups_bool_exp
  ): gsec_listing_of_unreached_people_groups_aggregate!

  """
  fetch data from the table: "gsec_listing_of_unreached_people_groups" using primary key columns
  """
  gsec_listing_of_unreached_people_groups_by_pk(id: bigint!): gsec_listing_of_unreached_people_groups

  """
  fetch data from the table: "gsec_listing_of_uupg_100k"
  """
  gsec_listing_of_uupg_100k(
    """distinct select on columns"""
    distinct_on: [gsec_listing_of_uupg_100k_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gsec_listing_of_uupg_100k_order_by!]

    """filter the rows returned"""
    where: gsec_listing_of_uupg_100k_bool_exp
  ): [gsec_listing_of_uupg_100k!]!

  """
  fetch data from the table: "gsec_listing_of_uupg_100k_additions"
  """
  gsec_listing_of_uupg_100k_additions(
    """distinct select on columns"""
    distinct_on: [gsec_listing_of_uupg_100k_additions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gsec_listing_of_uupg_100k_additions_order_by!]

    """filter the rows returned"""
    where: gsec_listing_of_uupg_100k_additions_bool_exp
  ): [gsec_listing_of_uupg_100k_additions!]!

  """
  fetch aggregated fields from the table: "gsec_listing_of_uupg_100k_additions"
  """
  gsec_listing_of_uupg_100k_additions_aggregate(
    """distinct select on columns"""
    distinct_on: [gsec_listing_of_uupg_100k_additions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gsec_listing_of_uupg_100k_additions_order_by!]

    """filter the rows returned"""
    where: gsec_listing_of_uupg_100k_additions_bool_exp
  ): gsec_listing_of_uupg_100k_additions_aggregate!

  """
  fetch data from the table: "gsec_listing_of_uupg_100k_additions" using primary key columns
  """
  gsec_listing_of_uupg_100k_additions_by_pk(id: bigint!): gsec_listing_of_uupg_100k_additions

  """
  fetch aggregated fields from the table: "gsec_listing_of_uupg_100k"
  """
  gsec_listing_of_uupg_100k_aggregate(
    """distinct select on columns"""
    distinct_on: [gsec_listing_of_uupg_100k_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gsec_listing_of_uupg_100k_order_by!]

    """filter the rows returned"""
    where: gsec_listing_of_uupg_100k_bool_exp
  ): gsec_listing_of_uupg_100k_aggregate!

  """
  fetch data from the table: "gsec_listing_of_uupg_100k" using primary key columns
  """
  gsec_listing_of_uupg_100k_by_pk(id: bigint!): gsec_listing_of_uupg_100k

  """
  fetch data from the table: "gsec_listing_of_uupg_100k_removals"
  """
  gsec_listing_of_uupg_100k_removals(
    """distinct select on columns"""
    distinct_on: [gsec_listing_of_uupg_100k_removals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gsec_listing_of_uupg_100k_removals_order_by!]

    """filter the rows returned"""
    where: gsec_listing_of_uupg_100k_removals_bool_exp
  ): [gsec_listing_of_uupg_100k_removals!]!

  """
  fetch aggregated fields from the table: "gsec_listing_of_uupg_100k_removals"
  """
  gsec_listing_of_uupg_100k_removals_aggregate(
    """distinct select on columns"""
    distinct_on: [gsec_listing_of_uupg_100k_removals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gsec_listing_of_uupg_100k_removals_order_by!]

    """filter the rows returned"""
    where: gsec_listing_of_uupg_100k_removals_bool_exp
  ): gsec_listing_of_uupg_100k_removals_aggregate!

  """
  fetch data from the table: "gsec_listing_of_uupg_100k_removals" using primary key columns
  """
  gsec_listing_of_uupg_100k_removals_by_pk(id: bigint!): gsec_listing_of_uupg_100k_removals

  """
  fetch data from the table: "iso_639_2"
  """
  iso_639_2(
    """distinct select on columns"""
    distinct_on: [iso_639_2_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [iso_639_2_order_by!]

    """filter the rows returned"""
    where: iso_639_2_bool_exp
  ): [iso_639_2!]!

  """
  fetch aggregated fields from the table: "iso_639_2"
  """
  iso_639_2_aggregate(
    """distinct select on columns"""
    distinct_on: [iso_639_2_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [iso_639_2_order_by!]

    """filter the rows returned"""
    where: iso_639_2_bool_exp
  ): iso_639_2_aggregate!

  """fetch data from the table: "iso_639_2" using primary key columns"""
  iso_639_2_by_pk(id: bigint!): iso_639_2

  """
  fetch data from the table: "iso_639_3"
  """
  iso_639_3(
    """distinct select on columns"""
    distinct_on: [iso_639_3_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [iso_639_3_order_by!]

    """filter the rows returned"""
    where: iso_639_3_bool_exp
  ): [iso_639_3!]!

  """
  fetch aggregated fields from the table: "iso_639_3"
  """
  iso_639_3_aggregate(
    """distinct select on columns"""
    distinct_on: [iso_639_3_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [iso_639_3_order_by!]

    """filter the rows returned"""
    where: iso_639_3_bool_exp
  ): iso_639_3_aggregate!

  """fetch data from the table: "iso_639_3" using primary key columns"""
  iso_639_3_by_pk(id: bigint!): iso_639_3

  """
  fetch data from the table: "iso_639_3_macrolanguages"
  """
  iso_639_3_macrolanguages(
    """distinct select on columns"""
    distinct_on: [iso_639_3_macrolanguages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [iso_639_3_macrolanguages_order_by!]

    """filter the rows returned"""
    where: iso_639_3_macrolanguages_bool_exp
  ): [iso_639_3_macrolanguages!]!

  """
  fetch aggregated fields from the table: "iso_639_3_macrolanguages"
  """
  iso_639_3_macrolanguages_aggregate(
    """distinct select on columns"""
    distinct_on: [iso_639_3_macrolanguages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [iso_639_3_macrolanguages_order_by!]

    """filter the rows returned"""
    where: iso_639_3_macrolanguages_bool_exp
  ): iso_639_3_macrolanguages_aggregate!

  """
  fetch data from the table: "iso_639_3_macrolanguages" using primary key columns
  """
  iso_639_3_macrolanguages_by_pk(id: bigint!): iso_639_3_macrolanguages

  """
  fetch data from the table: "iso_639_3_names"
  """
  iso_639_3_names(
    """distinct select on columns"""
    distinct_on: [iso_639_3_names_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [iso_639_3_names_order_by!]

    """filter the rows returned"""
    where: iso_639_3_names_bool_exp
  ): [iso_639_3_names!]!

  """
  fetch aggregated fields from the table: "iso_639_3_names"
  """
  iso_639_3_names_aggregate(
    """distinct select on columns"""
    distinct_on: [iso_639_3_names_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [iso_639_3_names_order_by!]

    """filter the rows returned"""
    where: iso_639_3_names_bool_exp
  ): iso_639_3_names_aggregate!

  """fetch data from the table: "iso_639_3_names" using primary key columns"""
  iso_639_3_names_by_pk(id: bigint!): iso_639_3_names

  """
  fetch data from the table: "iso_639_3_retirements"
  """
  iso_639_3_retirements(
    """distinct select on columns"""
    distinct_on: [iso_639_3_retirements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [iso_639_3_retirements_order_by!]

    """filter the rows returned"""
    where: iso_639_3_retirements_bool_exp
  ): [iso_639_3_retirements!]!

  """
  fetch aggregated fields from the table: "iso_639_3_retirements"
  """
  iso_639_3_retirements_aggregate(
    """distinct select on columns"""
    distinct_on: [iso_639_3_retirements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [iso_639_3_retirements_order_by!]

    """filter the rows returned"""
    where: iso_639_3_retirements_bool_exp
  ): iso_639_3_retirements_aggregate!

  """
  fetch data from the table: "iso_639_3_retirements" using primary key columns
  """
  iso_639_3_retirements_by_pk(id: bigint!): iso_639_3_retirements

  """
  fetch data from the table: "iso_639_5"
  """
  iso_639_5(
    """distinct select on columns"""
    distinct_on: [iso_639_5_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [iso_639_5_order_by!]

    """filter the rows returned"""
    where: iso_639_5_bool_exp
  ): [iso_639_5!]!

  """
  fetch aggregated fields from the table: "iso_639_5"
  """
  iso_639_5_aggregate(
    """distinct select on columns"""
    distinct_on: [iso_639_5_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [iso_639_5_order_by!]

    """filter the rows returned"""
    where: iso_639_5_bool_exp
  ): iso_639_5_aggregate!

  """fetch data from the table: "iso_639_5" using primary key columns"""
  iso_639_5_by_pk(id: bigint!): iso_639_5

  """
  fetch data from the table: "people_groups_data_only"
  """
  people_groups_data_only(
    """distinct select on columns"""
    distinct_on: [people_groups_data_only_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [people_groups_data_only_order_by!]

    """filter the rows returned"""
    where: people_groups_data_only_bool_exp
  ): [people_groups_data_only!]!

  """
  fetch aggregated fields from the table: "people_groups_data_only"
  """
  people_groups_data_only_aggregate(
    """distinct select on columns"""
    distinct_on: [people_groups_data_only_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [people_groups_data_only_order_by!]

    """filter the rows returned"""
    where: people_groups_data_only_bool_exp
  ): people_groups_data_only_aggregate!

  """
  fetch data from the table: "people_groups_data_only" using primary key columns
  """
  people_groups_data_only_by_pk(id: bigint!): people_groups_data_only

  """
  fetch data from the table: "progress_bible_language_details"
  """
  progress_bible_language_details(
    """distinct select on columns"""
    distinct_on: [progress_bible_language_details_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [progress_bible_language_details_order_by!]

    """filter the rows returned"""
    where: progress_bible_language_details_bool_exp
  ): [progress_bible_language_details!]!

  """
  fetch aggregated fields from the table: "progress_bible_language_details"
  """
  progress_bible_language_details_aggregate(
    """distinct select on columns"""
    distinct_on: [progress_bible_language_details_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [progress_bible_language_details_order_by!]

    """filter the rows returned"""
    where: progress_bible_language_details_bool_exp
  ): progress_bible_language_details_aggregate!

  """
  fetch data from the table: "progress_bible_language_details" using primary key columns
  """
  progress_bible_language_details_by_pk(id: bigint!): progress_bible_language_details

  """
  fetch data from the table: "rod_alternatenameindex"
  """
  rod_alternatenameindex(
    """distinct select on columns"""
    distinct_on: [rod_alternatenameindex_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rod_alternatenameindex_order_by!]

    """filter the rows returned"""
    where: rod_alternatenameindex_bool_exp
  ): [rod_alternatenameindex!]!

  """
  fetch aggregated fields from the table: "rod_alternatenameindex"
  """
  rod_alternatenameindex_aggregate(
    """distinct select on columns"""
    distinct_on: [rod_alternatenameindex_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rod_alternatenameindex_order_by!]

    """filter the rows returned"""
    where: rod_alternatenameindex_bool_exp
  ): rod_alternatenameindex_aggregate!

  """
  fetch data from the table: "rod_alternatenameindex" using primary key columns
  """
  rod_alternatenameindex_by_pk(id: bigint!): rod_alternatenameindex

  """
  fetch data from the table: "rod_changelist"
  """
  rod_changelist(
    """distinct select on columns"""
    distinct_on: [rod_changelist_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rod_changelist_order_by!]

    """filter the rows returned"""
    where: rod_changelist_bool_exp
  ): [rod_changelist!]!

  """
  fetch aggregated fields from the table: "rod_changelist"
  """
  rod_changelist_aggregate(
    """distinct select on columns"""
    distinct_on: [rod_changelist_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rod_changelist_order_by!]

    """filter the rows returned"""
    where: rod_changelist_bool_exp
  ): rod_changelist_aggregate!

  """fetch data from the table: "rod_changelist" using primary key columns"""
  rod_changelist_by_pk(id: bigint!): rod_changelist

  """
  fetch data from the table: "rod_dialects"
  """
  rod_dialects(
    """distinct select on columns"""
    distinct_on: [rod_dialects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rod_dialects_order_by!]

    """filter the rows returned"""
    where: rod_dialects_bool_exp
  ): [rod_dialects!]!

  """
  fetch aggregated fields from the table: "rod_dialects"
  """
  rod_dialects_aggregate(
    """distinct select on columns"""
    distinct_on: [rod_dialects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rod_dialects_order_by!]

    """filter the rows returned"""
    where: rod_dialects_bool_exp
  ): rod_dialects_aggregate!

  """fetch data from the table: "rod_dialects" using primary key columns"""
  rod_dialects_by_pk(id: bigint!): rod_dialects

  """
  fetch data from the table: "sil_country_codes"
  """
  sil_country_codes(
    """distinct select on columns"""
    distinct_on: [sil_country_codes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sil_country_codes_order_by!]

    """filter the rows returned"""
    where: sil_country_codes_bool_exp
  ): [sil_country_codes!]!

  """
  fetch aggregated fields from the table: "sil_country_codes"
  """
  sil_country_codes_aggregate(
    """distinct select on columns"""
    distinct_on: [sil_country_codes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sil_country_codes_order_by!]

    """filter the rows returned"""
    where: sil_country_codes_bool_exp
  ): sil_country_codes_aggregate!

  """
  fetch data from the table: "sil_country_codes" using primary key columns
  """
  sil_country_codes_by_pk(id: bigint!): sil_country_codes

  """
  fetch data from the table: "sil_language_codes"
  """
  sil_language_codes(
    """distinct select on columns"""
    distinct_on: [sil_language_codes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sil_language_codes_order_by!]

    """filter the rows returned"""
    where: sil_language_codes_bool_exp
  ): [sil_language_codes!]!

  """
  fetch aggregated fields from the table: "sil_language_codes"
  """
  sil_language_codes_aggregate(
    """distinct select on columns"""
    distinct_on: [sil_language_codes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sil_language_codes_order_by!]

    """filter the rows returned"""
    where: sil_language_codes_bool_exp
  ): sil_language_codes_aggregate!

  """
  fetch data from the table: "sil_language_codes" using primary key columns
  """
  sil_language_codes_by_pk(id: bigint!): sil_language_codes

  """
  fetch data from the table: "sil_language_index"
  """
  sil_language_index(
    """distinct select on columns"""
    distinct_on: [sil_language_index_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sil_language_index_order_by!]

    """filter the rows returned"""
    where: sil_language_index_bool_exp
  ): [sil_language_index!]!

  """
  fetch aggregated fields from the table: "sil_language_index"
  """
  sil_language_index_aggregate(
    """distinct select on columns"""
    distinct_on: [sil_language_index_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sil_language_index_order_by!]

    """filter the rows returned"""
    where: sil_language_index_bool_exp
  ): sil_language_index_aggregate!

  """
  fetch data from the table: "sil_language_index" using primary key columns
  """
  sil_language_index_by_pk(id: bigint!): sil_language_index

  """
  fetch data from the table: "uf_additional_languages"
  """
  uf_additional_languages(
    """distinct select on columns"""
    distinct_on: [uf_additional_languages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_additional_languages_order_by!]

    """filter the rows returned"""
    where: uf_additional_languages_bool_exp
  ): [uf_additional_languages!]!

  """
  fetch aggregated fields from the table: "uf_additional_languages"
  """
  uf_additional_languages_aggregate(
    """distinct select on columns"""
    distinct_on: [uf_additional_languages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_additional_languages_order_by!]

    """filter the rows returned"""
    where: uf_additional_languages_bool_exp
  ): uf_additional_languages_aggregate!

  """
  fetch data from the table: "uf_additional_languages" using primary key columns
  """
  uf_additional_languages_by_pk(id: bigint!): uf_additional_languages

  """
  fetch data from the table: "uf_countries_list"
  """
  uf_countries_list(
    """distinct select on columns"""
    distinct_on: [uf_countries_list_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_countries_list_order_by!]

    """filter the rows returned"""
    where: uf_countries_list_bool_exp
  ): [uf_countries_list!]!

  """
  fetch aggregated fields from the table: "uf_countries_list"
  """
  uf_countries_list_aggregate(
    """distinct select on columns"""
    distinct_on: [uf_countries_list_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_countries_list_order_by!]

    """filter the rows returned"""
    where: uf_countries_list_bool_exp
  ): uf_countries_list_aggregate!

  """
  fetch data from the table: "uf_countries_list" using primary key columns
  """
  uf_countries_list_by_pk(id: bigint!): uf_countries_list

  """
  fetch data from the table: "uf_langnames"
  """
  uf_langnames(
    """distinct select on columns"""
    distinct_on: [uf_langnames_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_langnames_order_by!]

    """filter the rows returned"""
    where: uf_langnames_bool_exp
  ): [uf_langnames!]!

  """
  fetch aggregated fields from the table: "uf_langnames"
  """
  uf_langnames_aggregate(
    """distinct select on columns"""
    distinct_on: [uf_langnames_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_langnames_order_by!]

    """filter the rows returned"""
    where: uf_langnames_bool_exp
  ): uf_langnames_aggregate!

  """fetch data from the table: "uf_langnames" using primary key columns"""
  uf_langnames_by_pk(id: bigint!): uf_langnames

  """
  fetch data from the table: "uf_languages"
  """
  uf_languages(
    """distinct select on columns"""
    distinct_on: [uf_languages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_languages_order_by!]

    """filter the rows returned"""
    where: uf_languages_bool_exp
  ): [uf_languages!]!

  """
  fetch aggregated fields from the table: "uf_languages"
  """
  uf_languages_aggregate(
    """distinct select on columns"""
    distinct_on: [uf_languages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_languages_order_by!]

    """filter the rows returned"""
    where: uf_languages_bool_exp
  ): uf_languages_aggregate!

  """fetch data from the table: "uf_languages" using primary key columns"""
  uf_languages_by_pk(id: bigint!): uf_languages

  """
  fetch data from the table: "uf_languages_with_bible_portions"
  """
  uf_languages_with_bible_portions(
    """distinct select on columns"""
    distinct_on: [uf_languages_with_bible_portions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_languages_with_bible_portions_order_by!]

    """filter the rows returned"""
    where: uf_languages_with_bible_portions_bool_exp
  ): [uf_languages_with_bible_portions!]!

  """
  fetch aggregated fields from the table: "uf_languages_with_bible_portions"
  """
  uf_languages_with_bible_portions_aggregate(
    """distinct select on columns"""
    distinct_on: [uf_languages_with_bible_portions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_languages_with_bible_portions_order_by!]

    """filter the rows returned"""
    where: uf_languages_with_bible_portions_bool_exp
  ): uf_languages_with_bible_portions_aggregate!

  """
  fetch data from the table: "uf_languages_with_bible_portions" using primary key columns
  """
  uf_languages_with_bible_portions_by_pk(id: bigint!): uf_languages_with_bible_portions

  """
  fetch data from the table: "uf_languages_with_gospel_recording"
  """
  uf_languages_with_gospel_recording(
    """distinct select on columns"""
    distinct_on: [uf_languages_with_gospel_recording_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_languages_with_gospel_recording_order_by!]

    """filter the rows returned"""
    where: uf_languages_with_gospel_recording_bool_exp
  ): [uf_languages_with_gospel_recording!]!

  """
  fetch aggregated fields from the table: "uf_languages_with_gospel_recording"
  """
  uf_languages_with_gospel_recording_aggregate(
    """distinct select on columns"""
    distinct_on: [uf_languages_with_gospel_recording_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_languages_with_gospel_recording_order_by!]

    """filter the rows returned"""
    where: uf_languages_with_gospel_recording_bool_exp
  ): uf_languages_with_gospel_recording_aggregate!

  """
  fetch data from the table: "uf_languages_with_gospel_recording" using primary key columns
  """
  uf_languages_with_gospel_recording_by_pk(id: bigint!): uf_languages_with_gospel_recording

  """
  fetch data from the table: "uf_languages_with_jesus_film"
  """
  uf_languages_with_jesus_film(
    """distinct select on columns"""
    distinct_on: [uf_languages_with_jesus_film_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_languages_with_jesus_film_order_by!]

    """filter the rows returned"""
    where: uf_languages_with_jesus_film_bool_exp
  ): [uf_languages_with_jesus_film!]!

  """
  fetch aggregated fields from the table: "uf_languages_with_jesus_film"
  """
  uf_languages_with_jesus_film_aggregate(
    """distinct select on columns"""
    distinct_on: [uf_languages_with_jesus_film_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_languages_with_jesus_film_order_by!]

    """filter the rows returned"""
    where: uf_languages_with_jesus_film_bool_exp
  ): uf_languages_with_jesus_film_aggregate!

  """
  fetch data from the table: "uf_languages_with_jesus_film" using primary key columns
  """
  uf_languages_with_jesus_film_by_pk(id: bigint!): uf_languages_with_jesus_film

  """
  fetch data from the table: "uf_languages_with_one_story_bible_stories"
  """
  uf_languages_with_one_story_bible_stories(
    """distinct select on columns"""
    distinct_on: [uf_languages_with_one_story_bible_stories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_languages_with_one_story_bible_stories_order_by!]

    """filter the rows returned"""
    where: uf_languages_with_one_story_bible_stories_bool_exp
  ): [uf_languages_with_one_story_bible_stories!]!

  """
  fetch aggregated fields from the table: "uf_languages_with_one_story_bible_stories"
  """
  uf_languages_with_one_story_bible_stories_aggregate(
    """distinct select on columns"""
    distinct_on: [uf_languages_with_one_story_bible_stories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_languages_with_one_story_bible_stories_order_by!]

    """filter the rows returned"""
    where: uf_languages_with_one_story_bible_stories_bool_exp
  ): uf_languages_with_one_story_bible_stories_aggregate!

  """
  fetch data from the table: "uf_languages_with_one_story_bible_stories" using primary key columns
  """
  uf_languages_with_one_story_bible_stories_by_pk(id: bigint!): uf_languages_with_one_story_bible_stories

  """
  fetch data from the table: "uf_languages_with_open_bible_stories"
  """
  uf_languages_with_open_bible_stories(
    """distinct select on columns"""
    distinct_on: [uf_languages_with_open_bible_stories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_languages_with_open_bible_stories_order_by!]

    """filter the rows returned"""
    where: uf_languages_with_open_bible_stories_bool_exp
  ): [uf_languages_with_open_bible_stories!]!

  """
  fetch aggregated fields from the table: "uf_languages_with_open_bible_stories"
  """
  uf_languages_with_open_bible_stories_aggregate(
    """distinct select on columns"""
    distinct_on: [uf_languages_with_open_bible_stories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_languages_with_open_bible_stories_order_by!]

    """filter the rows returned"""
    where: uf_languages_with_open_bible_stories_bool_exp
  ): uf_languages_with_open_bible_stories_aggregate!

  """
  fetch data from the table: "uf_languages_with_open_bible_stories" using primary key columns
  """
  uf_languages_with_open_bible_stories_by_pk(id: bigint!): uf_languages_with_open_bible_stories

  """
  fetch data from the table: "uf_languages_with_radio_broadcast"
  """
  uf_languages_with_radio_broadcast(
    """distinct select on columns"""
    distinct_on: [uf_languages_with_radio_broadcast_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_languages_with_radio_broadcast_order_by!]

    """filter the rows returned"""
    where: uf_languages_with_radio_broadcast_bool_exp
  ): [uf_languages_with_radio_broadcast!]!

  """
  fetch aggregated fields from the table: "uf_languages_with_radio_broadcast"
  """
  uf_languages_with_radio_broadcast_aggregate(
    """distinct select on columns"""
    distinct_on: [uf_languages_with_radio_broadcast_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_languages_with_radio_broadcast_order_by!]

    """filter the rows returned"""
    where: uf_languages_with_radio_broadcast_bool_exp
  ): uf_languages_with_radio_broadcast_aggregate!

  """
  fetch data from the table: "uf_languages_with_radio_broadcast" using primary key columns
  """
  uf_languages_with_radio_broadcast_by_pk(id: bigint!): uf_languages_with_radio_broadcast

  """
  fetch data from the table: "uf_networks"
  """
  uf_networks(
    """distinct select on columns"""
    distinct_on: [uf_networks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_networks_order_by!]

    """filter the rows returned"""
    where: uf_networks_bool_exp
  ): [uf_networks!]!

  """
  fetch aggregated fields from the table: "uf_networks"
  """
  uf_networks_aggregate(
    """distinct select on columns"""
    distinct_on: [uf_networks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_networks_order_by!]

    """filter the rows returned"""
    where: uf_networks_bool_exp
  ): uf_networks_aggregate!

  """fetch data from the table: "uf_networks" using primary key columns"""
  uf_networks_by_pk(id: bigint!): uf_networks
}

"""
columns and relationships of "rod_alternatenameindex"
"""
type rod_alternatenameindex {
  dialect_code: String
  id: bigint!
  variant_name: String
}

"""
aggregated selection of "rod_alternatenameindex"
"""
type rod_alternatenameindex_aggregate {
  aggregate: rod_alternatenameindex_aggregate_fields
  nodes: [rod_alternatenameindex!]!
}

"""
aggregate fields of "rod_alternatenameindex"
"""
type rod_alternatenameindex_aggregate_fields {
  avg: rod_alternatenameindex_avg_fields
  count(columns: [rod_alternatenameindex_select_column!], distinct: Boolean): Int!
  max: rod_alternatenameindex_max_fields
  min: rod_alternatenameindex_min_fields
  stddev: rod_alternatenameindex_stddev_fields
  stddev_pop: rod_alternatenameindex_stddev_pop_fields
  stddev_samp: rod_alternatenameindex_stddev_samp_fields
  sum: rod_alternatenameindex_sum_fields
  var_pop: rod_alternatenameindex_var_pop_fields
  var_samp: rod_alternatenameindex_var_samp_fields
  variance: rod_alternatenameindex_variance_fields
}

"""aggregate avg on columns"""
type rod_alternatenameindex_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "rod_alternatenameindex". All fields are combined with a logical 'AND'.
"""
input rod_alternatenameindex_bool_exp {
  _and: [rod_alternatenameindex_bool_exp!]
  _not: rod_alternatenameindex_bool_exp
  _or: [rod_alternatenameindex_bool_exp!]
  dialect_code: String_comparison_exp
  id: bigint_comparison_exp
  variant_name: String_comparison_exp
}

"""aggregate max on columns"""
type rod_alternatenameindex_max_fields {
  dialect_code: String
  id: bigint
  variant_name: String
}

"""aggregate min on columns"""
type rod_alternatenameindex_min_fields {
  dialect_code: String
  id: bigint
  variant_name: String
}

"""Ordering options when selecting data from "rod_alternatenameindex"."""
input rod_alternatenameindex_order_by {
  dialect_code: order_by
  id: order_by
  variant_name: order_by
}

"""
select columns of table "rod_alternatenameindex"
"""
enum rod_alternatenameindex_select_column {
  """column name"""
  dialect_code

  """column name"""
  id

  """column name"""
  variant_name
}

"""aggregate stddev on columns"""
type rod_alternatenameindex_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type rod_alternatenameindex_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type rod_alternatenameindex_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "rod_alternatenameindex"
"""
input rod_alternatenameindex_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: rod_alternatenameindex_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input rod_alternatenameindex_stream_cursor_value_input {
  dialect_code: String
  id: bigint
  variant_name: String
}

"""aggregate sum on columns"""
type rod_alternatenameindex_sum_fields {
  id: bigint
}

"""aggregate var_pop on columns"""
type rod_alternatenameindex_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type rod_alternatenameindex_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type rod_alternatenameindex_variance_fields {
  id: Float
}

"""
columns and relationships of "rod_changelist"
"""
type rod_changelist {
  change_type: String
  date: timestamp
  dialect_code: String
  explanation: String
  id: bigint!
  new_language_code: String
  prev_language_code: String
}

"""
aggregated selection of "rod_changelist"
"""
type rod_changelist_aggregate {
  aggregate: rod_changelist_aggregate_fields
  nodes: [rod_changelist!]!
}

"""
aggregate fields of "rod_changelist"
"""
type rod_changelist_aggregate_fields {
  avg: rod_changelist_avg_fields
  count(columns: [rod_changelist_select_column!], distinct: Boolean): Int!
  max: rod_changelist_max_fields
  min: rod_changelist_min_fields
  stddev: rod_changelist_stddev_fields
  stddev_pop: rod_changelist_stddev_pop_fields
  stddev_samp: rod_changelist_stddev_samp_fields
  sum: rod_changelist_sum_fields
  var_pop: rod_changelist_var_pop_fields
  var_samp: rod_changelist_var_samp_fields
  variance: rod_changelist_variance_fields
}

"""aggregate avg on columns"""
type rod_changelist_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "rod_changelist". All fields are combined with a logical 'AND'.
"""
input rod_changelist_bool_exp {
  _and: [rod_changelist_bool_exp!]
  _not: rod_changelist_bool_exp
  _or: [rod_changelist_bool_exp!]
  change_type: String_comparison_exp
  date: timestamp_comparison_exp
  dialect_code: String_comparison_exp
  explanation: String_comparison_exp
  id: bigint_comparison_exp
  new_language_code: String_comparison_exp
  prev_language_code: String_comparison_exp
}

"""aggregate max on columns"""
type rod_changelist_max_fields {
  change_type: String
  date: timestamp
  dialect_code: String
  explanation: String
  id: bigint
  new_language_code: String
  prev_language_code: String
}

"""aggregate min on columns"""
type rod_changelist_min_fields {
  change_type: String
  date: timestamp
  dialect_code: String
  explanation: String
  id: bigint
  new_language_code: String
  prev_language_code: String
}

"""Ordering options when selecting data from "rod_changelist"."""
input rod_changelist_order_by {
  change_type: order_by
  date: order_by
  dialect_code: order_by
  explanation: order_by
  id: order_by
  new_language_code: order_by
  prev_language_code: order_by
}

"""
select columns of table "rod_changelist"
"""
enum rod_changelist_select_column {
  """column name"""
  change_type

  """column name"""
  date

  """column name"""
  dialect_code

  """column name"""
  explanation

  """column name"""
  id

  """column name"""
  new_language_code

  """column name"""
  prev_language_code
}

"""aggregate stddev on columns"""
type rod_changelist_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type rod_changelist_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type rod_changelist_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "rod_changelist"
"""
input rod_changelist_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: rod_changelist_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input rod_changelist_stream_cursor_value_input {
  change_type: String
  date: timestamp
  dialect_code: String
  explanation: String
  id: bigint
  new_language_code: String
  prev_language_code: String
}

"""aggregate sum on columns"""
type rod_changelist_sum_fields {
  id: bigint
}

"""aggregate var_pop on columns"""
type rod_changelist_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type rod_changelist_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type rod_changelist_variance_fields {
  id: Float
}

"""
columns and relationships of "rod_dialects"
"""
type rod_dialects {
  country_code: String
  dialect_code: String
  dialect_name: String
  id: bigint!
  language_code: String
  language_name: String
  location_name: String
}

"""
aggregated selection of "rod_dialects"
"""
type rod_dialects_aggregate {
  aggregate: rod_dialects_aggregate_fields
  nodes: [rod_dialects!]!
}

"""
aggregate fields of "rod_dialects"
"""
type rod_dialects_aggregate_fields {
  avg: rod_dialects_avg_fields
  count(columns: [rod_dialects_select_column!], distinct: Boolean): Int!
  max: rod_dialects_max_fields
  min: rod_dialects_min_fields
  stddev: rod_dialects_stddev_fields
  stddev_pop: rod_dialects_stddev_pop_fields
  stddev_samp: rod_dialects_stddev_samp_fields
  sum: rod_dialects_sum_fields
  var_pop: rod_dialects_var_pop_fields
  var_samp: rod_dialects_var_samp_fields
  variance: rod_dialects_variance_fields
}

"""aggregate avg on columns"""
type rod_dialects_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "rod_dialects". All fields are combined with a logical 'AND'.
"""
input rod_dialects_bool_exp {
  _and: [rod_dialects_bool_exp!]
  _not: rod_dialects_bool_exp
  _or: [rod_dialects_bool_exp!]
  country_code: String_comparison_exp
  dialect_code: String_comparison_exp
  dialect_name: String_comparison_exp
  id: bigint_comparison_exp
  language_code: String_comparison_exp
  language_name: String_comparison_exp
  location_name: String_comparison_exp
}

"""aggregate max on columns"""
type rod_dialects_max_fields {
  country_code: String
  dialect_code: String
  dialect_name: String
  id: bigint
  language_code: String
  language_name: String
  location_name: String
}

"""aggregate min on columns"""
type rod_dialects_min_fields {
  country_code: String
  dialect_code: String
  dialect_name: String
  id: bigint
  language_code: String
  language_name: String
  location_name: String
}

"""Ordering options when selecting data from "rod_dialects"."""
input rod_dialects_order_by {
  country_code: order_by
  dialect_code: order_by
  dialect_name: order_by
  id: order_by
  language_code: order_by
  language_name: order_by
  location_name: order_by
}

"""
select columns of table "rod_dialects"
"""
enum rod_dialects_select_column {
  """column name"""
  country_code

  """column name"""
  dialect_code

  """column name"""
  dialect_name

  """column name"""
  id

  """column name"""
  language_code

  """column name"""
  language_name

  """column name"""
  location_name
}

"""aggregate stddev on columns"""
type rod_dialects_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type rod_dialects_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type rod_dialects_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "rod_dialects"
"""
input rod_dialects_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: rod_dialects_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input rod_dialects_stream_cursor_value_input {
  country_code: String
  dialect_code: String
  dialect_name: String
  id: bigint
  language_code: String
  language_name: String
  location_name: String
}

"""aggregate sum on columns"""
type rod_dialects_sum_fields {
  id: bigint
}

"""aggregate var_pop on columns"""
type rod_dialects_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type rod_dialects_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type rod_dialects_variance_fields {
  id: Float
}

"""
columns and relationships of "sil_country_codes"
"""
type sil_country_codes {
  area: String!
  code: String!
  id: bigint!
  name: String!
}

"""
aggregated selection of "sil_country_codes"
"""
type sil_country_codes_aggregate {
  aggregate: sil_country_codes_aggregate_fields
  nodes: [sil_country_codes!]!
}

"""
aggregate fields of "sil_country_codes"
"""
type sil_country_codes_aggregate_fields {
  avg: sil_country_codes_avg_fields
  count(columns: [sil_country_codes_select_column!], distinct: Boolean): Int!
  max: sil_country_codes_max_fields
  min: sil_country_codes_min_fields
  stddev: sil_country_codes_stddev_fields
  stddev_pop: sil_country_codes_stddev_pop_fields
  stddev_samp: sil_country_codes_stddev_samp_fields
  sum: sil_country_codes_sum_fields
  var_pop: sil_country_codes_var_pop_fields
  var_samp: sil_country_codes_var_samp_fields
  variance: sil_country_codes_variance_fields
}

"""aggregate avg on columns"""
type sil_country_codes_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "sil_country_codes". All fields are combined with a logical 'AND'.
"""
input sil_country_codes_bool_exp {
  _and: [sil_country_codes_bool_exp!]
  _not: sil_country_codes_bool_exp
  _or: [sil_country_codes_bool_exp!]
  area: String_comparison_exp
  code: String_comparison_exp
  id: bigint_comparison_exp
  name: String_comparison_exp
}

"""aggregate max on columns"""
type sil_country_codes_max_fields {
  area: String
  code: String
  id: bigint
  name: String
}

"""aggregate min on columns"""
type sil_country_codes_min_fields {
  area: String
  code: String
  id: bigint
  name: String
}

"""Ordering options when selecting data from "sil_country_codes"."""
input sil_country_codes_order_by {
  area: order_by
  code: order_by
  id: order_by
  name: order_by
}

"""
select columns of table "sil_country_codes"
"""
enum sil_country_codes_select_column {
  """column name"""
  area

  """column name"""
  code

  """column name"""
  id

  """column name"""
  name
}

"""aggregate stddev on columns"""
type sil_country_codes_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type sil_country_codes_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type sil_country_codes_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "sil_country_codes"
"""
input sil_country_codes_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: sil_country_codes_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input sil_country_codes_stream_cursor_value_input {
  area: String
  code: String
  id: bigint
  name: String
}

"""aggregate sum on columns"""
type sil_country_codes_sum_fields {
  id: bigint
}

"""aggregate var_pop on columns"""
type sil_country_codes_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type sil_country_codes_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type sil_country_codes_variance_fields {
  id: Float
}

"""
columns and relationships of "sil_language_codes"
"""
type sil_language_codes {
  code: String!
  country_code: String!
  id: bigint!
  name: String!
  status: sil_language_codes_status!
}

"""
aggregated selection of "sil_language_codes"
"""
type sil_language_codes_aggregate {
  aggregate: sil_language_codes_aggregate_fields
  nodes: [sil_language_codes!]!
}

"""
aggregate fields of "sil_language_codes"
"""
type sil_language_codes_aggregate_fields {
  avg: sil_language_codes_avg_fields
  count(columns: [sil_language_codes_select_column!], distinct: Boolean): Int!
  max: sil_language_codes_max_fields
  min: sil_language_codes_min_fields
  stddev: sil_language_codes_stddev_fields
  stddev_pop: sil_language_codes_stddev_pop_fields
  stddev_samp: sil_language_codes_stddev_samp_fields
  sum: sil_language_codes_sum_fields
  var_pop: sil_language_codes_var_pop_fields
  var_samp: sil_language_codes_var_samp_fields
  variance: sil_language_codes_variance_fields
}

"""aggregate avg on columns"""
type sil_language_codes_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "sil_language_codes". All fields are combined with a logical 'AND'.
"""
input sil_language_codes_bool_exp {
  _and: [sil_language_codes_bool_exp!]
  _not: sil_language_codes_bool_exp
  _or: [sil_language_codes_bool_exp!]
  code: String_comparison_exp
  country_code: String_comparison_exp
  id: bigint_comparison_exp
  name: String_comparison_exp
  status: sil_language_codes_status_comparison_exp
}

"""aggregate max on columns"""
type sil_language_codes_max_fields {
  code: String
  country_code: String
  id: bigint
  name: String
  status: sil_language_codes_status
}

"""aggregate min on columns"""
type sil_language_codes_min_fields {
  code: String
  country_code: String
  id: bigint
  name: String
  status: sil_language_codes_status
}

"""Ordering options when selecting data from "sil_language_codes"."""
input sil_language_codes_order_by {
  code: order_by
  country_code: order_by
  id: order_by
  name: order_by
  status: order_by
}

"""
select columns of table "sil_language_codes"
"""
enum sil_language_codes_select_column {
  """column name"""
  code

  """column name"""
  country_code

  """column name"""
  id

  """column name"""
  name

  """column name"""
  status
}

scalar sil_language_codes_status

"""
Boolean expression to compare columns of type "sil_language_codes_status". All fields are combined with logical 'AND'.
"""
input sil_language_codes_status_comparison_exp {
  _eq: sil_language_codes_status
  _gt: sil_language_codes_status
  _gte: sil_language_codes_status
  _in: [sil_language_codes_status!]
  _is_null: Boolean
  _lt: sil_language_codes_status
  _lte: sil_language_codes_status
  _neq: sil_language_codes_status
  _nin: [sil_language_codes_status!]
}

"""aggregate stddev on columns"""
type sil_language_codes_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type sil_language_codes_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type sil_language_codes_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "sil_language_codes"
"""
input sil_language_codes_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: sil_language_codes_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input sil_language_codes_stream_cursor_value_input {
  code: String
  country_code: String
  id: bigint
  name: String
  status: sil_language_codes_status
}

"""aggregate sum on columns"""
type sil_language_codes_sum_fields {
  id: bigint
}

"""aggregate var_pop on columns"""
type sil_language_codes_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type sil_language_codes_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type sil_language_codes_variance_fields {
  id: Float
}

"""
columns and relationships of "sil_language_index"
"""
type sil_language_index {
  country_code: String!
  id: bigint!
  language_code: String!
  name: String!
  name_type: String!
}

"""
aggregated selection of "sil_language_index"
"""
type sil_language_index_aggregate {
  aggregate: sil_language_index_aggregate_fields
  nodes: [sil_language_index!]!
}

"""
aggregate fields of "sil_language_index"
"""
type sil_language_index_aggregate_fields {
  avg: sil_language_index_avg_fields
  count(columns: [sil_language_index_select_column!], distinct: Boolean): Int!
  max: sil_language_index_max_fields
  min: sil_language_index_min_fields
  stddev: sil_language_index_stddev_fields
  stddev_pop: sil_language_index_stddev_pop_fields
  stddev_samp: sil_language_index_stddev_samp_fields
  sum: sil_language_index_sum_fields
  var_pop: sil_language_index_var_pop_fields
  var_samp: sil_language_index_var_samp_fields
  variance: sil_language_index_variance_fields
}

"""aggregate avg on columns"""
type sil_language_index_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "sil_language_index". All fields are combined with a logical 'AND'.
"""
input sil_language_index_bool_exp {
  _and: [sil_language_index_bool_exp!]
  _not: sil_language_index_bool_exp
  _or: [sil_language_index_bool_exp!]
  country_code: String_comparison_exp
  id: bigint_comparison_exp
  language_code: String_comparison_exp
  name: String_comparison_exp
  name_type: String_comparison_exp
}

"""aggregate max on columns"""
type sil_language_index_max_fields {
  country_code: String
  id: bigint
  language_code: String
  name: String
  name_type: String
}

"""aggregate min on columns"""
type sil_language_index_min_fields {
  country_code: String
  id: bigint
  language_code: String
  name: String
  name_type: String
}

"""Ordering options when selecting data from "sil_language_index"."""
input sil_language_index_order_by {
  country_code: order_by
  id: order_by
  language_code: order_by
  name: order_by
  name_type: order_by
}

"""
select columns of table "sil_language_index"
"""
enum sil_language_index_select_column {
  """column name"""
  country_code

  """column name"""
  id

  """column name"""
  language_code

  """column name"""
  name

  """column name"""
  name_type
}

"""aggregate stddev on columns"""
type sil_language_index_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type sil_language_index_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type sil_language_index_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "sil_language_index"
"""
input sil_language_index_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: sil_language_index_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input sil_language_index_stream_cursor_value_input {
  country_code: String
  id: bigint
  language_code: String
  name: String
  name_type: String
}

"""aggregate sum on columns"""
type sil_language_index_sum_fields {
  id: bigint
}

"""aggregate var_pop on columns"""
type sil_language_index_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type sil_language_index_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type sil_language_index_variance_fields {
  id: Float
}

type subscription_root {
  """
  fetch data from the table: "glottolog_family"
  """
  glottolog_family(
    """distinct select on columns"""
    distinct_on: [glottolog_family_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [glottolog_family_order_by!]

    """filter the rows returned"""
    where: glottolog_family_bool_exp
  ): [glottolog_family!]!

  """
  fetch aggregated fields from the table: "glottolog_family"
  """
  glottolog_family_aggregate(
    """distinct select on columns"""
    distinct_on: [glottolog_family_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [glottolog_family_order_by!]

    """filter the rows returned"""
    where: glottolog_family_bool_exp
  ): glottolog_family_aggregate!

  """
  fetch data from the table: "glottolog_family" using primary key columns
  """
  glottolog_family_by_pk(id: bigint!): glottolog_family

  """
  fetch data from the table in a streaming manner : "glottolog_family"
  """
  glottolog_family_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [glottolog_family_stream_cursor_input]!

    """filter the rows returned"""
    where: glottolog_family_bool_exp
  ): [glottolog_family!]!

  """
  fetch data from the table: "glottolog_language"
  """
  glottolog_language(
    """distinct select on columns"""
    distinct_on: [glottolog_language_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [glottolog_language_order_by!]

    """filter the rows returned"""
    where: glottolog_language_bool_exp
  ): [glottolog_language!]!

  """
  fetch aggregated fields from the table: "glottolog_language"
  """
  glottolog_language_aggregate(
    """distinct select on columns"""
    distinct_on: [glottolog_language_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [glottolog_language_order_by!]

    """filter the rows returned"""
    where: glottolog_language_bool_exp
  ): glottolog_language_aggregate!

  """
  fetch data from the table: "glottolog_language" using primary key columns
  """
  glottolog_language_by_pk(id: bigint!): glottolog_language

  """
  fetch data from the table in a streaming manner : "glottolog_language"
  """
  glottolog_language_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [glottolog_language_stream_cursor_input]!

    """filter the rows returned"""
    where: glottolog_language_bool_exp
  ): [glottolog_language!]!

  """
  fetch data from the table: "gsec_listing_of_people_groups"
  """
  gsec_listing_of_people_groups(
    """distinct select on columns"""
    distinct_on: [gsec_listing_of_people_groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gsec_listing_of_people_groups_order_by!]

    """filter the rows returned"""
    where: gsec_listing_of_people_groups_bool_exp
  ): [gsec_listing_of_people_groups!]!

  """
  fetch aggregated fields from the table: "gsec_listing_of_people_groups"
  """
  gsec_listing_of_people_groups_aggregate(
    """distinct select on columns"""
    distinct_on: [gsec_listing_of_people_groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gsec_listing_of_people_groups_order_by!]

    """filter the rows returned"""
    where: gsec_listing_of_people_groups_bool_exp
  ): gsec_listing_of_people_groups_aggregate!

  """
  fetch data from the table: "gsec_listing_of_people_groups" using primary key columns
  """
  gsec_listing_of_people_groups_by_pk(id: bigint!): gsec_listing_of_people_groups

  """
  fetch data from the table in a streaming manner : "gsec_listing_of_people_groups"
  """
  gsec_listing_of_people_groups_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [gsec_listing_of_people_groups_stream_cursor_input]!

    """filter the rows returned"""
    where: gsec_listing_of_people_groups_bool_exp
  ): [gsec_listing_of_people_groups!]!

  """
  fetch data from the table: "gsec_listing_of_unengaged_unreached_people_groups"
  """
  gsec_listing_of_unengaged_unreached_people_groups(
    """distinct select on columns"""
    distinct_on: [gsec_listing_of_unengaged_unreached_people_groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gsec_listing_of_unengaged_unreached_people_groups_order_by!]

    """filter the rows returned"""
    where: gsec_listing_of_unengaged_unreached_people_groups_bool_exp
  ): [gsec_listing_of_unengaged_unreached_people_groups!]!

  """
  fetch aggregated fields from the table: "gsec_listing_of_unengaged_unreached_people_groups"
  """
  gsec_listing_of_unengaged_unreached_people_groups_aggregate(
    """distinct select on columns"""
    distinct_on: [gsec_listing_of_unengaged_unreached_people_groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gsec_listing_of_unengaged_unreached_people_groups_order_by!]

    """filter the rows returned"""
    where: gsec_listing_of_unengaged_unreached_people_groups_bool_exp
  ): gsec_listing_of_unengaged_unreached_people_groups_aggregate!

  """
  fetch data from the table: "gsec_listing_of_unengaged_unreached_people_groups" using primary key columns
  """
  gsec_listing_of_unengaged_unreached_people_groups_by_pk(id: bigint!): gsec_listing_of_unengaged_unreached_people_groups

  """
  fetch data from the table in a streaming manner : "gsec_listing_of_unengaged_unreached_people_groups"
  """
  gsec_listing_of_unengaged_unreached_people_groups_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [gsec_listing_of_unengaged_unreached_people_groups_stream_cursor_input]!

    """filter the rows returned"""
    where: gsec_listing_of_unengaged_unreached_people_groups_bool_exp
  ): [gsec_listing_of_unengaged_unreached_people_groups!]!

  """
  fetch data from the table: "gsec_listing_of_unreached_people_groups"
  """
  gsec_listing_of_unreached_people_groups(
    """distinct select on columns"""
    distinct_on: [gsec_listing_of_unreached_people_groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gsec_listing_of_unreached_people_groups_order_by!]

    """filter the rows returned"""
    where: gsec_listing_of_unreached_people_groups_bool_exp
  ): [gsec_listing_of_unreached_people_groups!]!

  """
  fetch aggregated fields from the table: "gsec_listing_of_unreached_people_groups"
  """
  gsec_listing_of_unreached_people_groups_aggregate(
    """distinct select on columns"""
    distinct_on: [gsec_listing_of_unreached_people_groups_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gsec_listing_of_unreached_people_groups_order_by!]

    """filter the rows returned"""
    where: gsec_listing_of_unreached_people_groups_bool_exp
  ): gsec_listing_of_unreached_people_groups_aggregate!

  """
  fetch data from the table: "gsec_listing_of_unreached_people_groups" using primary key columns
  """
  gsec_listing_of_unreached_people_groups_by_pk(id: bigint!): gsec_listing_of_unreached_people_groups

  """
  fetch data from the table in a streaming manner : "gsec_listing_of_unreached_people_groups"
  """
  gsec_listing_of_unreached_people_groups_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [gsec_listing_of_unreached_people_groups_stream_cursor_input]!

    """filter the rows returned"""
    where: gsec_listing_of_unreached_people_groups_bool_exp
  ): [gsec_listing_of_unreached_people_groups!]!

  """
  fetch data from the table: "gsec_listing_of_uupg_100k"
  """
  gsec_listing_of_uupg_100k(
    """distinct select on columns"""
    distinct_on: [gsec_listing_of_uupg_100k_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gsec_listing_of_uupg_100k_order_by!]

    """filter the rows returned"""
    where: gsec_listing_of_uupg_100k_bool_exp
  ): [gsec_listing_of_uupg_100k!]!

  """
  fetch data from the table: "gsec_listing_of_uupg_100k_additions"
  """
  gsec_listing_of_uupg_100k_additions(
    """distinct select on columns"""
    distinct_on: [gsec_listing_of_uupg_100k_additions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gsec_listing_of_uupg_100k_additions_order_by!]

    """filter the rows returned"""
    where: gsec_listing_of_uupg_100k_additions_bool_exp
  ): [gsec_listing_of_uupg_100k_additions!]!

  """
  fetch aggregated fields from the table: "gsec_listing_of_uupg_100k_additions"
  """
  gsec_listing_of_uupg_100k_additions_aggregate(
    """distinct select on columns"""
    distinct_on: [gsec_listing_of_uupg_100k_additions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gsec_listing_of_uupg_100k_additions_order_by!]

    """filter the rows returned"""
    where: gsec_listing_of_uupg_100k_additions_bool_exp
  ): gsec_listing_of_uupg_100k_additions_aggregate!

  """
  fetch data from the table: "gsec_listing_of_uupg_100k_additions" using primary key columns
  """
  gsec_listing_of_uupg_100k_additions_by_pk(id: bigint!): gsec_listing_of_uupg_100k_additions

  """
  fetch data from the table in a streaming manner : "gsec_listing_of_uupg_100k_additions"
  """
  gsec_listing_of_uupg_100k_additions_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [gsec_listing_of_uupg_100k_additions_stream_cursor_input]!

    """filter the rows returned"""
    where: gsec_listing_of_uupg_100k_additions_bool_exp
  ): [gsec_listing_of_uupg_100k_additions!]!

  """
  fetch aggregated fields from the table: "gsec_listing_of_uupg_100k"
  """
  gsec_listing_of_uupg_100k_aggregate(
    """distinct select on columns"""
    distinct_on: [gsec_listing_of_uupg_100k_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gsec_listing_of_uupg_100k_order_by!]

    """filter the rows returned"""
    where: gsec_listing_of_uupg_100k_bool_exp
  ): gsec_listing_of_uupg_100k_aggregate!

  """
  fetch data from the table: "gsec_listing_of_uupg_100k" using primary key columns
  """
  gsec_listing_of_uupg_100k_by_pk(id: bigint!): gsec_listing_of_uupg_100k

  """
  fetch data from the table: "gsec_listing_of_uupg_100k_removals"
  """
  gsec_listing_of_uupg_100k_removals(
    """distinct select on columns"""
    distinct_on: [gsec_listing_of_uupg_100k_removals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gsec_listing_of_uupg_100k_removals_order_by!]

    """filter the rows returned"""
    where: gsec_listing_of_uupg_100k_removals_bool_exp
  ): [gsec_listing_of_uupg_100k_removals!]!

  """
  fetch aggregated fields from the table: "gsec_listing_of_uupg_100k_removals"
  """
  gsec_listing_of_uupg_100k_removals_aggregate(
    """distinct select on columns"""
    distinct_on: [gsec_listing_of_uupg_100k_removals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gsec_listing_of_uupg_100k_removals_order_by!]

    """filter the rows returned"""
    where: gsec_listing_of_uupg_100k_removals_bool_exp
  ): gsec_listing_of_uupg_100k_removals_aggregate!

  """
  fetch data from the table: "gsec_listing_of_uupg_100k_removals" using primary key columns
  """
  gsec_listing_of_uupg_100k_removals_by_pk(id: bigint!): gsec_listing_of_uupg_100k_removals

  """
  fetch data from the table in a streaming manner : "gsec_listing_of_uupg_100k_removals"
  """
  gsec_listing_of_uupg_100k_removals_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [gsec_listing_of_uupg_100k_removals_stream_cursor_input]!

    """filter the rows returned"""
    where: gsec_listing_of_uupg_100k_removals_bool_exp
  ): [gsec_listing_of_uupg_100k_removals!]!

  """
  fetch data from the table in a streaming manner : "gsec_listing_of_uupg_100k"
  """
  gsec_listing_of_uupg_100k_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [gsec_listing_of_uupg_100k_stream_cursor_input]!

    """filter the rows returned"""
    where: gsec_listing_of_uupg_100k_bool_exp
  ): [gsec_listing_of_uupg_100k!]!

  """
  fetch data from the table: "iso_639_2"
  """
  iso_639_2(
    """distinct select on columns"""
    distinct_on: [iso_639_2_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [iso_639_2_order_by!]

    """filter the rows returned"""
    where: iso_639_2_bool_exp
  ): [iso_639_2!]!

  """
  fetch aggregated fields from the table: "iso_639_2"
  """
  iso_639_2_aggregate(
    """distinct select on columns"""
    distinct_on: [iso_639_2_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [iso_639_2_order_by!]

    """filter the rows returned"""
    where: iso_639_2_bool_exp
  ): iso_639_2_aggregate!

  """fetch data from the table: "iso_639_2" using primary key columns"""
  iso_639_2_by_pk(id: bigint!): iso_639_2

  """
  fetch data from the table in a streaming manner : "iso_639_2"
  """
  iso_639_2_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [iso_639_2_stream_cursor_input]!

    """filter the rows returned"""
    where: iso_639_2_bool_exp
  ): [iso_639_2!]!

  """
  fetch data from the table: "iso_639_3"
  """
  iso_639_3(
    """distinct select on columns"""
    distinct_on: [iso_639_3_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [iso_639_3_order_by!]

    """filter the rows returned"""
    where: iso_639_3_bool_exp
  ): [iso_639_3!]!

  """
  fetch aggregated fields from the table: "iso_639_3"
  """
  iso_639_3_aggregate(
    """distinct select on columns"""
    distinct_on: [iso_639_3_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [iso_639_3_order_by!]

    """filter the rows returned"""
    where: iso_639_3_bool_exp
  ): iso_639_3_aggregate!

  """fetch data from the table: "iso_639_3" using primary key columns"""
  iso_639_3_by_pk(id: bigint!): iso_639_3

  """
  fetch data from the table: "iso_639_3_macrolanguages"
  """
  iso_639_3_macrolanguages(
    """distinct select on columns"""
    distinct_on: [iso_639_3_macrolanguages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [iso_639_3_macrolanguages_order_by!]

    """filter the rows returned"""
    where: iso_639_3_macrolanguages_bool_exp
  ): [iso_639_3_macrolanguages!]!

  """
  fetch aggregated fields from the table: "iso_639_3_macrolanguages"
  """
  iso_639_3_macrolanguages_aggregate(
    """distinct select on columns"""
    distinct_on: [iso_639_3_macrolanguages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [iso_639_3_macrolanguages_order_by!]

    """filter the rows returned"""
    where: iso_639_3_macrolanguages_bool_exp
  ): iso_639_3_macrolanguages_aggregate!

  """
  fetch data from the table: "iso_639_3_macrolanguages" using primary key columns
  """
  iso_639_3_macrolanguages_by_pk(id: bigint!): iso_639_3_macrolanguages

  """
  fetch data from the table in a streaming manner : "iso_639_3_macrolanguages"
  """
  iso_639_3_macrolanguages_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [iso_639_3_macrolanguages_stream_cursor_input]!

    """filter the rows returned"""
    where: iso_639_3_macrolanguages_bool_exp
  ): [iso_639_3_macrolanguages!]!

  """
  fetch data from the table: "iso_639_3_names"
  """
  iso_639_3_names(
    """distinct select on columns"""
    distinct_on: [iso_639_3_names_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [iso_639_3_names_order_by!]

    """filter the rows returned"""
    where: iso_639_3_names_bool_exp
  ): [iso_639_3_names!]!

  """
  fetch aggregated fields from the table: "iso_639_3_names"
  """
  iso_639_3_names_aggregate(
    """distinct select on columns"""
    distinct_on: [iso_639_3_names_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [iso_639_3_names_order_by!]

    """filter the rows returned"""
    where: iso_639_3_names_bool_exp
  ): iso_639_3_names_aggregate!

  """fetch data from the table: "iso_639_3_names" using primary key columns"""
  iso_639_3_names_by_pk(id: bigint!): iso_639_3_names

  """
  fetch data from the table in a streaming manner : "iso_639_3_names"
  """
  iso_639_3_names_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [iso_639_3_names_stream_cursor_input]!

    """filter the rows returned"""
    where: iso_639_3_names_bool_exp
  ): [iso_639_3_names!]!

  """
  fetch data from the table: "iso_639_3_retirements"
  """
  iso_639_3_retirements(
    """distinct select on columns"""
    distinct_on: [iso_639_3_retirements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [iso_639_3_retirements_order_by!]

    """filter the rows returned"""
    where: iso_639_3_retirements_bool_exp
  ): [iso_639_3_retirements!]!

  """
  fetch aggregated fields from the table: "iso_639_3_retirements"
  """
  iso_639_3_retirements_aggregate(
    """distinct select on columns"""
    distinct_on: [iso_639_3_retirements_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [iso_639_3_retirements_order_by!]

    """filter the rows returned"""
    where: iso_639_3_retirements_bool_exp
  ): iso_639_3_retirements_aggregate!

  """
  fetch data from the table: "iso_639_3_retirements" using primary key columns
  """
  iso_639_3_retirements_by_pk(id: bigint!): iso_639_3_retirements

  """
  fetch data from the table in a streaming manner : "iso_639_3_retirements"
  """
  iso_639_3_retirements_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [iso_639_3_retirements_stream_cursor_input]!

    """filter the rows returned"""
    where: iso_639_3_retirements_bool_exp
  ): [iso_639_3_retirements!]!

  """
  fetch data from the table in a streaming manner : "iso_639_3"
  """
  iso_639_3_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [iso_639_3_stream_cursor_input]!

    """filter the rows returned"""
    where: iso_639_3_bool_exp
  ): [iso_639_3!]!

  """
  fetch data from the table: "iso_639_5"
  """
  iso_639_5(
    """distinct select on columns"""
    distinct_on: [iso_639_5_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [iso_639_5_order_by!]

    """filter the rows returned"""
    where: iso_639_5_bool_exp
  ): [iso_639_5!]!

  """
  fetch aggregated fields from the table: "iso_639_5"
  """
  iso_639_5_aggregate(
    """distinct select on columns"""
    distinct_on: [iso_639_5_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [iso_639_5_order_by!]

    """filter the rows returned"""
    where: iso_639_5_bool_exp
  ): iso_639_5_aggregate!

  """fetch data from the table: "iso_639_5" using primary key columns"""
  iso_639_5_by_pk(id: bigint!): iso_639_5

  """
  fetch data from the table in a streaming manner : "iso_639_5"
  """
  iso_639_5_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [iso_639_5_stream_cursor_input]!

    """filter the rows returned"""
    where: iso_639_5_bool_exp
  ): [iso_639_5!]!

  """
  fetch data from the table: "people_groups_data_only"
  """
  people_groups_data_only(
    """distinct select on columns"""
    distinct_on: [people_groups_data_only_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [people_groups_data_only_order_by!]

    """filter the rows returned"""
    where: people_groups_data_only_bool_exp
  ): [people_groups_data_only!]!

  """
  fetch aggregated fields from the table: "people_groups_data_only"
  """
  people_groups_data_only_aggregate(
    """distinct select on columns"""
    distinct_on: [people_groups_data_only_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [people_groups_data_only_order_by!]

    """filter the rows returned"""
    where: people_groups_data_only_bool_exp
  ): people_groups_data_only_aggregate!

  """
  fetch data from the table: "people_groups_data_only" using primary key columns
  """
  people_groups_data_only_by_pk(id: bigint!): people_groups_data_only

  """
  fetch data from the table in a streaming manner : "people_groups_data_only"
  """
  people_groups_data_only_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [people_groups_data_only_stream_cursor_input]!

    """filter the rows returned"""
    where: people_groups_data_only_bool_exp
  ): [people_groups_data_only!]!

  """
  fetch data from the table: "progress_bible_language_details"
  """
  progress_bible_language_details(
    """distinct select on columns"""
    distinct_on: [progress_bible_language_details_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [progress_bible_language_details_order_by!]

    """filter the rows returned"""
    where: progress_bible_language_details_bool_exp
  ): [progress_bible_language_details!]!

  """
  fetch aggregated fields from the table: "progress_bible_language_details"
  """
  progress_bible_language_details_aggregate(
    """distinct select on columns"""
    distinct_on: [progress_bible_language_details_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [progress_bible_language_details_order_by!]

    """filter the rows returned"""
    where: progress_bible_language_details_bool_exp
  ): progress_bible_language_details_aggregate!

  """
  fetch data from the table: "progress_bible_language_details" using primary key columns
  """
  progress_bible_language_details_by_pk(id: bigint!): progress_bible_language_details

  """
  fetch data from the table in a streaming manner : "progress_bible_language_details"
  """
  progress_bible_language_details_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [progress_bible_language_details_stream_cursor_input]!

    """filter the rows returned"""
    where: progress_bible_language_details_bool_exp
  ): [progress_bible_language_details!]!

  """
  fetch data from the table: "rod_alternatenameindex"
  """
  rod_alternatenameindex(
    """distinct select on columns"""
    distinct_on: [rod_alternatenameindex_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rod_alternatenameindex_order_by!]

    """filter the rows returned"""
    where: rod_alternatenameindex_bool_exp
  ): [rod_alternatenameindex!]!

  """
  fetch aggregated fields from the table: "rod_alternatenameindex"
  """
  rod_alternatenameindex_aggregate(
    """distinct select on columns"""
    distinct_on: [rod_alternatenameindex_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rod_alternatenameindex_order_by!]

    """filter the rows returned"""
    where: rod_alternatenameindex_bool_exp
  ): rod_alternatenameindex_aggregate!

  """
  fetch data from the table: "rod_alternatenameindex" using primary key columns
  """
  rod_alternatenameindex_by_pk(id: bigint!): rod_alternatenameindex

  """
  fetch data from the table in a streaming manner : "rod_alternatenameindex"
  """
  rod_alternatenameindex_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [rod_alternatenameindex_stream_cursor_input]!

    """filter the rows returned"""
    where: rod_alternatenameindex_bool_exp
  ): [rod_alternatenameindex!]!

  """
  fetch data from the table: "rod_changelist"
  """
  rod_changelist(
    """distinct select on columns"""
    distinct_on: [rod_changelist_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rod_changelist_order_by!]

    """filter the rows returned"""
    where: rod_changelist_bool_exp
  ): [rod_changelist!]!

  """
  fetch aggregated fields from the table: "rod_changelist"
  """
  rod_changelist_aggregate(
    """distinct select on columns"""
    distinct_on: [rod_changelist_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rod_changelist_order_by!]

    """filter the rows returned"""
    where: rod_changelist_bool_exp
  ): rod_changelist_aggregate!

  """fetch data from the table: "rod_changelist" using primary key columns"""
  rod_changelist_by_pk(id: bigint!): rod_changelist

  """
  fetch data from the table in a streaming manner : "rod_changelist"
  """
  rod_changelist_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [rod_changelist_stream_cursor_input]!

    """filter the rows returned"""
    where: rod_changelist_bool_exp
  ): [rod_changelist!]!

  """
  fetch data from the table: "rod_dialects"
  """
  rod_dialects(
    """distinct select on columns"""
    distinct_on: [rod_dialects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rod_dialects_order_by!]

    """filter the rows returned"""
    where: rod_dialects_bool_exp
  ): [rod_dialects!]!

  """
  fetch aggregated fields from the table: "rod_dialects"
  """
  rod_dialects_aggregate(
    """distinct select on columns"""
    distinct_on: [rod_dialects_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [rod_dialects_order_by!]

    """filter the rows returned"""
    where: rod_dialects_bool_exp
  ): rod_dialects_aggregate!

  """fetch data from the table: "rod_dialects" using primary key columns"""
  rod_dialects_by_pk(id: bigint!): rod_dialects

  """
  fetch data from the table in a streaming manner : "rod_dialects"
  """
  rod_dialects_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [rod_dialects_stream_cursor_input]!

    """filter the rows returned"""
    where: rod_dialects_bool_exp
  ): [rod_dialects!]!

  """
  fetch data from the table: "sil_country_codes"
  """
  sil_country_codes(
    """distinct select on columns"""
    distinct_on: [sil_country_codes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sil_country_codes_order_by!]

    """filter the rows returned"""
    where: sil_country_codes_bool_exp
  ): [sil_country_codes!]!

  """
  fetch aggregated fields from the table: "sil_country_codes"
  """
  sil_country_codes_aggregate(
    """distinct select on columns"""
    distinct_on: [sil_country_codes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sil_country_codes_order_by!]

    """filter the rows returned"""
    where: sil_country_codes_bool_exp
  ): sil_country_codes_aggregate!

  """
  fetch data from the table: "sil_country_codes" using primary key columns
  """
  sil_country_codes_by_pk(id: bigint!): sil_country_codes

  """
  fetch data from the table in a streaming manner : "sil_country_codes"
  """
  sil_country_codes_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [sil_country_codes_stream_cursor_input]!

    """filter the rows returned"""
    where: sil_country_codes_bool_exp
  ): [sil_country_codes!]!

  """
  fetch data from the table: "sil_language_codes"
  """
  sil_language_codes(
    """distinct select on columns"""
    distinct_on: [sil_language_codes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sil_language_codes_order_by!]

    """filter the rows returned"""
    where: sil_language_codes_bool_exp
  ): [sil_language_codes!]!

  """
  fetch aggregated fields from the table: "sil_language_codes"
  """
  sil_language_codes_aggregate(
    """distinct select on columns"""
    distinct_on: [sil_language_codes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sil_language_codes_order_by!]

    """filter the rows returned"""
    where: sil_language_codes_bool_exp
  ): sil_language_codes_aggregate!

  """
  fetch data from the table: "sil_language_codes" using primary key columns
  """
  sil_language_codes_by_pk(id: bigint!): sil_language_codes

  """
  fetch data from the table in a streaming manner : "sil_language_codes"
  """
  sil_language_codes_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [sil_language_codes_stream_cursor_input]!

    """filter the rows returned"""
    where: sil_language_codes_bool_exp
  ): [sil_language_codes!]!

  """
  fetch data from the table: "sil_language_index"
  """
  sil_language_index(
    """distinct select on columns"""
    distinct_on: [sil_language_index_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sil_language_index_order_by!]

    """filter the rows returned"""
    where: sil_language_index_bool_exp
  ): [sil_language_index!]!

  """
  fetch aggregated fields from the table: "sil_language_index"
  """
  sil_language_index_aggregate(
    """distinct select on columns"""
    distinct_on: [sil_language_index_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [sil_language_index_order_by!]

    """filter the rows returned"""
    where: sil_language_index_bool_exp
  ): sil_language_index_aggregate!

  """
  fetch data from the table: "sil_language_index" using primary key columns
  """
  sil_language_index_by_pk(id: bigint!): sil_language_index

  """
  fetch data from the table in a streaming manner : "sil_language_index"
  """
  sil_language_index_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [sil_language_index_stream_cursor_input]!

    """filter the rows returned"""
    where: sil_language_index_bool_exp
  ): [sil_language_index!]!

  """
  fetch data from the table: "uf_additional_languages"
  """
  uf_additional_languages(
    """distinct select on columns"""
    distinct_on: [uf_additional_languages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_additional_languages_order_by!]

    """filter the rows returned"""
    where: uf_additional_languages_bool_exp
  ): [uf_additional_languages!]!

  """
  fetch aggregated fields from the table: "uf_additional_languages"
  """
  uf_additional_languages_aggregate(
    """distinct select on columns"""
    distinct_on: [uf_additional_languages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_additional_languages_order_by!]

    """filter the rows returned"""
    where: uf_additional_languages_bool_exp
  ): uf_additional_languages_aggregate!

  """
  fetch data from the table: "uf_additional_languages" using primary key columns
  """
  uf_additional_languages_by_pk(id: bigint!): uf_additional_languages

  """
  fetch data from the table in a streaming manner : "uf_additional_languages"
  """
  uf_additional_languages_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uf_additional_languages_stream_cursor_input]!

    """filter the rows returned"""
    where: uf_additional_languages_bool_exp
  ): [uf_additional_languages!]!

  """
  fetch data from the table: "uf_countries_list"
  """
  uf_countries_list(
    """distinct select on columns"""
    distinct_on: [uf_countries_list_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_countries_list_order_by!]

    """filter the rows returned"""
    where: uf_countries_list_bool_exp
  ): [uf_countries_list!]!

  """
  fetch aggregated fields from the table: "uf_countries_list"
  """
  uf_countries_list_aggregate(
    """distinct select on columns"""
    distinct_on: [uf_countries_list_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_countries_list_order_by!]

    """filter the rows returned"""
    where: uf_countries_list_bool_exp
  ): uf_countries_list_aggregate!

  """
  fetch data from the table: "uf_countries_list" using primary key columns
  """
  uf_countries_list_by_pk(id: bigint!): uf_countries_list

  """
  fetch data from the table in a streaming manner : "uf_countries_list"
  """
  uf_countries_list_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uf_countries_list_stream_cursor_input]!

    """filter the rows returned"""
    where: uf_countries_list_bool_exp
  ): [uf_countries_list!]!

  """
  fetch data from the table: "uf_langnames"
  """
  uf_langnames(
    """distinct select on columns"""
    distinct_on: [uf_langnames_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_langnames_order_by!]

    """filter the rows returned"""
    where: uf_langnames_bool_exp
  ): [uf_langnames!]!

  """
  fetch aggregated fields from the table: "uf_langnames"
  """
  uf_langnames_aggregate(
    """distinct select on columns"""
    distinct_on: [uf_langnames_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_langnames_order_by!]

    """filter the rows returned"""
    where: uf_langnames_bool_exp
  ): uf_langnames_aggregate!

  """fetch data from the table: "uf_langnames" using primary key columns"""
  uf_langnames_by_pk(id: bigint!): uf_langnames

  """
  fetch data from the table in a streaming manner : "uf_langnames"
  """
  uf_langnames_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uf_langnames_stream_cursor_input]!

    """filter the rows returned"""
    where: uf_langnames_bool_exp
  ): [uf_langnames!]!

  """
  fetch data from the table: "uf_languages"
  """
  uf_languages(
    """distinct select on columns"""
    distinct_on: [uf_languages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_languages_order_by!]

    """filter the rows returned"""
    where: uf_languages_bool_exp
  ): [uf_languages!]!

  """
  fetch aggregated fields from the table: "uf_languages"
  """
  uf_languages_aggregate(
    """distinct select on columns"""
    distinct_on: [uf_languages_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_languages_order_by!]

    """filter the rows returned"""
    where: uf_languages_bool_exp
  ): uf_languages_aggregate!

  """fetch data from the table: "uf_languages" using primary key columns"""
  uf_languages_by_pk(id: bigint!): uf_languages

  """
  fetch data from the table in a streaming manner : "uf_languages"
  """
  uf_languages_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uf_languages_stream_cursor_input]!

    """filter the rows returned"""
    where: uf_languages_bool_exp
  ): [uf_languages!]!

  """
  fetch data from the table: "uf_languages_with_bible_portions"
  """
  uf_languages_with_bible_portions(
    """distinct select on columns"""
    distinct_on: [uf_languages_with_bible_portions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_languages_with_bible_portions_order_by!]

    """filter the rows returned"""
    where: uf_languages_with_bible_portions_bool_exp
  ): [uf_languages_with_bible_portions!]!

  """
  fetch aggregated fields from the table: "uf_languages_with_bible_portions"
  """
  uf_languages_with_bible_portions_aggregate(
    """distinct select on columns"""
    distinct_on: [uf_languages_with_bible_portions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_languages_with_bible_portions_order_by!]

    """filter the rows returned"""
    where: uf_languages_with_bible_portions_bool_exp
  ): uf_languages_with_bible_portions_aggregate!

  """
  fetch data from the table: "uf_languages_with_bible_portions" using primary key columns
  """
  uf_languages_with_bible_portions_by_pk(id: bigint!): uf_languages_with_bible_portions

  """
  fetch data from the table in a streaming manner : "uf_languages_with_bible_portions"
  """
  uf_languages_with_bible_portions_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uf_languages_with_bible_portions_stream_cursor_input]!

    """filter the rows returned"""
    where: uf_languages_with_bible_portions_bool_exp
  ): [uf_languages_with_bible_portions!]!

  """
  fetch data from the table: "uf_languages_with_gospel_recording"
  """
  uf_languages_with_gospel_recording(
    """distinct select on columns"""
    distinct_on: [uf_languages_with_gospel_recording_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_languages_with_gospel_recording_order_by!]

    """filter the rows returned"""
    where: uf_languages_with_gospel_recording_bool_exp
  ): [uf_languages_with_gospel_recording!]!

  """
  fetch aggregated fields from the table: "uf_languages_with_gospel_recording"
  """
  uf_languages_with_gospel_recording_aggregate(
    """distinct select on columns"""
    distinct_on: [uf_languages_with_gospel_recording_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_languages_with_gospel_recording_order_by!]

    """filter the rows returned"""
    where: uf_languages_with_gospel_recording_bool_exp
  ): uf_languages_with_gospel_recording_aggregate!

  """
  fetch data from the table: "uf_languages_with_gospel_recording" using primary key columns
  """
  uf_languages_with_gospel_recording_by_pk(id: bigint!): uf_languages_with_gospel_recording

  """
  fetch data from the table in a streaming manner : "uf_languages_with_gospel_recording"
  """
  uf_languages_with_gospel_recording_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uf_languages_with_gospel_recording_stream_cursor_input]!

    """filter the rows returned"""
    where: uf_languages_with_gospel_recording_bool_exp
  ): [uf_languages_with_gospel_recording!]!

  """
  fetch data from the table: "uf_languages_with_jesus_film"
  """
  uf_languages_with_jesus_film(
    """distinct select on columns"""
    distinct_on: [uf_languages_with_jesus_film_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_languages_with_jesus_film_order_by!]

    """filter the rows returned"""
    where: uf_languages_with_jesus_film_bool_exp
  ): [uf_languages_with_jesus_film!]!

  """
  fetch aggregated fields from the table: "uf_languages_with_jesus_film"
  """
  uf_languages_with_jesus_film_aggregate(
    """distinct select on columns"""
    distinct_on: [uf_languages_with_jesus_film_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_languages_with_jesus_film_order_by!]

    """filter the rows returned"""
    where: uf_languages_with_jesus_film_bool_exp
  ): uf_languages_with_jesus_film_aggregate!

  """
  fetch data from the table: "uf_languages_with_jesus_film" using primary key columns
  """
  uf_languages_with_jesus_film_by_pk(id: bigint!): uf_languages_with_jesus_film

  """
  fetch data from the table in a streaming manner : "uf_languages_with_jesus_film"
  """
  uf_languages_with_jesus_film_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uf_languages_with_jesus_film_stream_cursor_input]!

    """filter the rows returned"""
    where: uf_languages_with_jesus_film_bool_exp
  ): [uf_languages_with_jesus_film!]!

  """
  fetch data from the table: "uf_languages_with_one_story_bible_stories"
  """
  uf_languages_with_one_story_bible_stories(
    """distinct select on columns"""
    distinct_on: [uf_languages_with_one_story_bible_stories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_languages_with_one_story_bible_stories_order_by!]

    """filter the rows returned"""
    where: uf_languages_with_one_story_bible_stories_bool_exp
  ): [uf_languages_with_one_story_bible_stories!]!

  """
  fetch aggregated fields from the table: "uf_languages_with_one_story_bible_stories"
  """
  uf_languages_with_one_story_bible_stories_aggregate(
    """distinct select on columns"""
    distinct_on: [uf_languages_with_one_story_bible_stories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_languages_with_one_story_bible_stories_order_by!]

    """filter the rows returned"""
    where: uf_languages_with_one_story_bible_stories_bool_exp
  ): uf_languages_with_one_story_bible_stories_aggregate!

  """
  fetch data from the table: "uf_languages_with_one_story_bible_stories" using primary key columns
  """
  uf_languages_with_one_story_bible_stories_by_pk(id: bigint!): uf_languages_with_one_story_bible_stories

  """
  fetch data from the table in a streaming manner : "uf_languages_with_one_story_bible_stories"
  """
  uf_languages_with_one_story_bible_stories_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uf_languages_with_one_story_bible_stories_stream_cursor_input]!

    """filter the rows returned"""
    where: uf_languages_with_one_story_bible_stories_bool_exp
  ): [uf_languages_with_one_story_bible_stories!]!

  """
  fetch data from the table: "uf_languages_with_open_bible_stories"
  """
  uf_languages_with_open_bible_stories(
    """distinct select on columns"""
    distinct_on: [uf_languages_with_open_bible_stories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_languages_with_open_bible_stories_order_by!]

    """filter the rows returned"""
    where: uf_languages_with_open_bible_stories_bool_exp
  ): [uf_languages_with_open_bible_stories!]!

  """
  fetch aggregated fields from the table: "uf_languages_with_open_bible_stories"
  """
  uf_languages_with_open_bible_stories_aggregate(
    """distinct select on columns"""
    distinct_on: [uf_languages_with_open_bible_stories_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_languages_with_open_bible_stories_order_by!]

    """filter the rows returned"""
    where: uf_languages_with_open_bible_stories_bool_exp
  ): uf_languages_with_open_bible_stories_aggregate!

  """
  fetch data from the table: "uf_languages_with_open_bible_stories" using primary key columns
  """
  uf_languages_with_open_bible_stories_by_pk(id: bigint!): uf_languages_with_open_bible_stories

  """
  fetch data from the table in a streaming manner : "uf_languages_with_open_bible_stories"
  """
  uf_languages_with_open_bible_stories_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uf_languages_with_open_bible_stories_stream_cursor_input]!

    """filter the rows returned"""
    where: uf_languages_with_open_bible_stories_bool_exp
  ): [uf_languages_with_open_bible_stories!]!

  """
  fetch data from the table: "uf_languages_with_radio_broadcast"
  """
  uf_languages_with_radio_broadcast(
    """distinct select on columns"""
    distinct_on: [uf_languages_with_radio_broadcast_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_languages_with_radio_broadcast_order_by!]

    """filter the rows returned"""
    where: uf_languages_with_radio_broadcast_bool_exp
  ): [uf_languages_with_radio_broadcast!]!

  """
  fetch aggregated fields from the table: "uf_languages_with_radio_broadcast"
  """
  uf_languages_with_radio_broadcast_aggregate(
    """distinct select on columns"""
    distinct_on: [uf_languages_with_radio_broadcast_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_languages_with_radio_broadcast_order_by!]

    """filter the rows returned"""
    where: uf_languages_with_radio_broadcast_bool_exp
  ): uf_languages_with_radio_broadcast_aggregate!

  """
  fetch data from the table: "uf_languages_with_radio_broadcast" using primary key columns
  """
  uf_languages_with_radio_broadcast_by_pk(id: bigint!): uf_languages_with_radio_broadcast

  """
  fetch data from the table in a streaming manner : "uf_languages_with_radio_broadcast"
  """
  uf_languages_with_radio_broadcast_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uf_languages_with_radio_broadcast_stream_cursor_input]!

    """filter the rows returned"""
    where: uf_languages_with_radio_broadcast_bool_exp
  ): [uf_languages_with_radio_broadcast!]!

  """
  fetch data from the table: "uf_networks"
  """
  uf_networks(
    """distinct select on columns"""
    distinct_on: [uf_networks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_networks_order_by!]

    """filter the rows returned"""
    where: uf_networks_bool_exp
  ): [uf_networks!]!

  """
  fetch aggregated fields from the table: "uf_networks"
  """
  uf_networks_aggregate(
    """distinct select on columns"""
    distinct_on: [uf_networks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [uf_networks_order_by!]

    """filter the rows returned"""
    where: uf_networks_bool_exp
  ): uf_networks_aggregate!

  """fetch data from the table: "uf_networks" using primary key columns"""
  uf_networks_by_pk(id: bigint!): uf_networks

  """
  fetch data from the table in a streaming manner : "uf_networks"
  """
  uf_networks_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [uf_networks_stream_cursor_input]!

    """filter the rows returned"""
    where: uf_networks_bool_exp
  ): [uf_networks!]!
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

"""
columns and relationships of "uf_additional_languages"
"""
type uf_additional_languages {
  comment: String
  common_name: String
  direction: String
  id: bigint!
  ietf_tag: String
  native_name: String
  three_letter: String
  two_letter: String
}

"""
aggregated selection of "uf_additional_languages"
"""
type uf_additional_languages_aggregate {
  aggregate: uf_additional_languages_aggregate_fields
  nodes: [uf_additional_languages!]!
}

"""
aggregate fields of "uf_additional_languages"
"""
type uf_additional_languages_aggregate_fields {
  avg: uf_additional_languages_avg_fields
  count(columns: [uf_additional_languages_select_column!], distinct: Boolean): Int!
  max: uf_additional_languages_max_fields
  min: uf_additional_languages_min_fields
  stddev: uf_additional_languages_stddev_fields
  stddev_pop: uf_additional_languages_stddev_pop_fields
  stddev_samp: uf_additional_languages_stddev_samp_fields
  sum: uf_additional_languages_sum_fields
  var_pop: uf_additional_languages_var_pop_fields
  var_samp: uf_additional_languages_var_samp_fields
  variance: uf_additional_languages_variance_fields
}

"""aggregate avg on columns"""
type uf_additional_languages_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "uf_additional_languages". All fields are combined with a logical 'AND'.
"""
input uf_additional_languages_bool_exp {
  _and: [uf_additional_languages_bool_exp!]
  _not: uf_additional_languages_bool_exp
  _or: [uf_additional_languages_bool_exp!]
  comment: String_comparison_exp
  common_name: String_comparison_exp
  direction: String_comparison_exp
  id: bigint_comparison_exp
  ietf_tag: String_comparison_exp
  native_name: String_comparison_exp
  three_letter: String_comparison_exp
  two_letter: String_comparison_exp
}

"""aggregate max on columns"""
type uf_additional_languages_max_fields {
  comment: String
  common_name: String
  direction: String
  id: bigint
  ietf_tag: String
  native_name: String
  three_letter: String
  two_letter: String
}

"""aggregate min on columns"""
type uf_additional_languages_min_fields {
  comment: String
  common_name: String
  direction: String
  id: bigint
  ietf_tag: String
  native_name: String
  three_letter: String
  two_letter: String
}

"""Ordering options when selecting data from "uf_additional_languages"."""
input uf_additional_languages_order_by {
  comment: order_by
  common_name: order_by
  direction: order_by
  id: order_by
  ietf_tag: order_by
  native_name: order_by
  three_letter: order_by
  two_letter: order_by
}

"""
select columns of table "uf_additional_languages"
"""
enum uf_additional_languages_select_column {
  """column name"""
  comment

  """column name"""
  common_name

  """column name"""
  direction

  """column name"""
  id

  """column name"""
  ietf_tag

  """column name"""
  native_name

  """column name"""
  three_letter

  """column name"""
  two_letter
}

"""aggregate stddev on columns"""
type uf_additional_languages_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type uf_additional_languages_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type uf_additional_languages_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "uf_additional_languages"
"""
input uf_additional_languages_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uf_additional_languages_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uf_additional_languages_stream_cursor_value_input {
  comment: String
  common_name: String
  direction: String
  id: bigint
  ietf_tag: String
  native_name: String
  three_letter: String
  two_letter: String
}

"""aggregate sum on columns"""
type uf_additional_languages_sum_fields {
  id: bigint
}

"""aggregate var_pop on columns"""
type uf_additional_languages_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type uf_additional_languages_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type uf_additional_languages_variance_fields {
  id: Float
}

"""
columns and relationships of "uf_countries_list"
"""
type uf_countries_list {
  alpha_3_code: String
  code: String
  id: bigint!
  name: String
  population: Int
  region: String
  wa_region: String
}

"""
aggregated selection of "uf_countries_list"
"""
type uf_countries_list_aggregate {
  aggregate: uf_countries_list_aggregate_fields
  nodes: [uf_countries_list!]!
}

"""
aggregate fields of "uf_countries_list"
"""
type uf_countries_list_aggregate_fields {
  avg: uf_countries_list_avg_fields
  count(columns: [uf_countries_list_select_column!], distinct: Boolean): Int!
  max: uf_countries_list_max_fields
  min: uf_countries_list_min_fields
  stddev: uf_countries_list_stddev_fields
  stddev_pop: uf_countries_list_stddev_pop_fields
  stddev_samp: uf_countries_list_stddev_samp_fields
  sum: uf_countries_list_sum_fields
  var_pop: uf_countries_list_var_pop_fields
  var_samp: uf_countries_list_var_samp_fields
  variance: uf_countries_list_variance_fields
}

"""aggregate avg on columns"""
type uf_countries_list_avg_fields {
  id: Float
  population: Float
}

"""
Boolean expression to filter rows from the table "uf_countries_list". All fields are combined with a logical 'AND'.
"""
input uf_countries_list_bool_exp {
  _and: [uf_countries_list_bool_exp!]
  _not: uf_countries_list_bool_exp
  _or: [uf_countries_list_bool_exp!]
  alpha_3_code: String_comparison_exp
  code: String_comparison_exp
  id: bigint_comparison_exp
  name: String_comparison_exp
  population: Int_comparison_exp
  region: String_comparison_exp
  wa_region: String_comparison_exp
}

"""aggregate max on columns"""
type uf_countries_list_max_fields {
  alpha_3_code: String
  code: String
  id: bigint
  name: String
  population: Int
  region: String
  wa_region: String
}

"""aggregate min on columns"""
type uf_countries_list_min_fields {
  alpha_3_code: String
  code: String
  id: bigint
  name: String
  population: Int
  region: String
  wa_region: String
}

"""Ordering options when selecting data from "uf_countries_list"."""
input uf_countries_list_order_by {
  alpha_3_code: order_by
  code: order_by
  id: order_by
  name: order_by
  population: order_by
  region: order_by
  wa_region: order_by
}

"""
select columns of table "uf_countries_list"
"""
enum uf_countries_list_select_column {
  """column name"""
  alpha_3_code

  """column name"""
  code

  """column name"""
  id

  """column name"""
  name

  """column name"""
  population

  """column name"""
  region

  """column name"""
  wa_region
}

"""aggregate stddev on columns"""
type uf_countries_list_stddev_fields {
  id: Float
  population: Float
}

"""aggregate stddev_pop on columns"""
type uf_countries_list_stddev_pop_fields {
  id: Float
  population: Float
}

"""aggregate stddev_samp on columns"""
type uf_countries_list_stddev_samp_fields {
  id: Float
  population: Float
}

"""
Streaming cursor of the table "uf_countries_list"
"""
input uf_countries_list_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uf_countries_list_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uf_countries_list_stream_cursor_value_input {
  alpha_3_code: String
  code: String
  id: bigint
  name: String
  population: Int
  region: String
  wa_region: String
}

"""aggregate sum on columns"""
type uf_countries_list_sum_fields {
  id: bigint
  population: Int
}

"""aggregate var_pop on columns"""
type uf_countries_list_var_pop_fields {
  id: Float
  population: Float
}

"""aggregate var_samp on columns"""
type uf_countries_list_var_samp_fields {
  id: Float
  population: Float
}

"""aggregate variance on columns"""
type uf_countries_list_variance_fields {
  id: Float
  population: Float
}

"""
columns and relationships of "uf_langnames"
"""
type uf_langnames {
  code: String
  id: bigint!
  name: String
}

"""
aggregated selection of "uf_langnames"
"""
type uf_langnames_aggregate {
  aggregate: uf_langnames_aggregate_fields
  nodes: [uf_langnames!]!
}

"""
aggregate fields of "uf_langnames"
"""
type uf_langnames_aggregate_fields {
  avg: uf_langnames_avg_fields
  count(columns: [uf_langnames_select_column!], distinct: Boolean): Int!
  max: uf_langnames_max_fields
  min: uf_langnames_min_fields
  stddev: uf_langnames_stddev_fields
  stddev_pop: uf_langnames_stddev_pop_fields
  stddev_samp: uf_langnames_stddev_samp_fields
  sum: uf_langnames_sum_fields
  var_pop: uf_langnames_var_pop_fields
  var_samp: uf_langnames_var_samp_fields
  variance: uf_langnames_variance_fields
}

"""aggregate avg on columns"""
type uf_langnames_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "uf_langnames". All fields are combined with a logical 'AND'.
"""
input uf_langnames_bool_exp {
  _and: [uf_langnames_bool_exp!]
  _not: uf_langnames_bool_exp
  _or: [uf_langnames_bool_exp!]
  code: String_comparison_exp
  id: bigint_comparison_exp
  name: String_comparison_exp
}

"""aggregate max on columns"""
type uf_langnames_max_fields {
  code: String
  id: bigint
  name: String
}

"""aggregate min on columns"""
type uf_langnames_min_fields {
  code: String
  id: bigint
  name: String
}

"""Ordering options when selecting data from "uf_langnames"."""
input uf_langnames_order_by {
  code: order_by
  id: order_by
  name: order_by
}

"""
select columns of table "uf_langnames"
"""
enum uf_langnames_select_column {
  """column name"""
  code

  """column name"""
  id

  """column name"""
  name
}

"""aggregate stddev on columns"""
type uf_langnames_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type uf_langnames_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type uf_langnames_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "uf_langnames"
"""
input uf_langnames_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uf_langnames_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uf_langnames_stream_cursor_value_input {
  code: String
  id: bigint
  name: String
}

"""aggregate sum on columns"""
type uf_langnames_sum_fields {
  id: bigint
}

"""aggregate var_pop on columns"""
type uf_langnames_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type uf_langnames_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type uf_langnames_variance_fields {
  id: Float
}

"""
columns and relationships of "uf_languages"
"""
type uf_languages {
  alternate_name: String
  anglicized_name: String
  code: String!
  country: String
  gateway_language: String
  gw: String
  id: bigint!
  iso_639_3: String
  name: String!
}

"""
aggregated selection of "uf_languages"
"""
type uf_languages_aggregate {
  aggregate: uf_languages_aggregate_fields
  nodes: [uf_languages!]!
}

"""
aggregate fields of "uf_languages"
"""
type uf_languages_aggregate_fields {
  avg: uf_languages_avg_fields
  count(columns: [uf_languages_select_column!], distinct: Boolean): Int!
  max: uf_languages_max_fields
  min: uf_languages_min_fields
  stddev: uf_languages_stddev_fields
  stddev_pop: uf_languages_stddev_pop_fields
  stddev_samp: uf_languages_stddev_samp_fields
  sum: uf_languages_sum_fields
  var_pop: uf_languages_var_pop_fields
  var_samp: uf_languages_var_samp_fields
  variance: uf_languages_variance_fields
}

"""aggregate avg on columns"""
type uf_languages_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "uf_languages". All fields are combined with a logical 'AND'.
"""
input uf_languages_bool_exp {
  _and: [uf_languages_bool_exp!]
  _not: uf_languages_bool_exp
  _or: [uf_languages_bool_exp!]
  alternate_name: String_comparison_exp
  anglicized_name: String_comparison_exp
  code: String_comparison_exp
  country: String_comparison_exp
  gateway_language: String_comparison_exp
  gw: String_comparison_exp
  id: bigint_comparison_exp
  iso_639_3: String_comparison_exp
  name: String_comparison_exp
}

"""aggregate max on columns"""
type uf_languages_max_fields {
  alternate_name: String
  anglicized_name: String
  code: String
  country: String
  gateway_language: String
  gw: String
  id: bigint
  iso_639_3: String
  name: String
}

"""aggregate min on columns"""
type uf_languages_min_fields {
  alternate_name: String
  anglicized_name: String
  code: String
  country: String
  gateway_language: String
  gw: String
  id: bigint
  iso_639_3: String
  name: String
}

"""Ordering options when selecting data from "uf_languages"."""
input uf_languages_order_by {
  alternate_name: order_by
  anglicized_name: order_by
  code: order_by
  country: order_by
  gateway_language: order_by
  gw: order_by
  id: order_by
  iso_639_3: order_by
  name: order_by
}

"""
select columns of table "uf_languages"
"""
enum uf_languages_select_column {
  """column name"""
  alternate_name

  """column name"""
  anglicized_name

  """column name"""
  code

  """column name"""
  country

  """column name"""
  gateway_language

  """column name"""
  gw

  """column name"""
  id

  """column name"""
  iso_639_3

  """column name"""
  name
}

"""aggregate stddev on columns"""
type uf_languages_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type uf_languages_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type uf_languages_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "uf_languages"
"""
input uf_languages_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uf_languages_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uf_languages_stream_cursor_value_input {
  alternate_name: String
  anglicized_name: String
  code: String
  country: String
  gateway_language: String
  gw: String
  id: bigint
  iso_639_3: String
  name: String
}

"""aggregate sum on columns"""
type uf_languages_sum_fields {
  id: bigint
}

"""aggregate var_pop on columns"""
type uf_languages_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type uf_languages_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type uf_languages_variance_fields {
  id: Float
}

"""
columns and relationships of "uf_languages_with_bible_portions"
"""
type uf_languages_with_bible_portions {
  id: bigint!
  info: String
  language: String
  media: String
  published: Boolean
}

"""
aggregated selection of "uf_languages_with_bible_portions"
"""
type uf_languages_with_bible_portions_aggregate {
  aggregate: uf_languages_with_bible_portions_aggregate_fields
  nodes: [uf_languages_with_bible_portions!]!
}

"""
aggregate fields of "uf_languages_with_bible_portions"
"""
type uf_languages_with_bible_portions_aggregate_fields {
  avg: uf_languages_with_bible_portions_avg_fields
  count(columns: [uf_languages_with_bible_portions_select_column!], distinct: Boolean): Int!
  max: uf_languages_with_bible_portions_max_fields
  min: uf_languages_with_bible_portions_min_fields
  stddev: uf_languages_with_bible_portions_stddev_fields
  stddev_pop: uf_languages_with_bible_portions_stddev_pop_fields
  stddev_samp: uf_languages_with_bible_portions_stddev_samp_fields
  sum: uf_languages_with_bible_portions_sum_fields
  var_pop: uf_languages_with_bible_portions_var_pop_fields
  var_samp: uf_languages_with_bible_portions_var_samp_fields
  variance: uf_languages_with_bible_portions_variance_fields
}

"""aggregate avg on columns"""
type uf_languages_with_bible_portions_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "uf_languages_with_bible_portions". All fields are combined with a logical 'AND'.
"""
input uf_languages_with_bible_portions_bool_exp {
  _and: [uf_languages_with_bible_portions_bool_exp!]
  _not: uf_languages_with_bible_portions_bool_exp
  _or: [uf_languages_with_bible_portions_bool_exp!]
  id: bigint_comparison_exp
  info: String_comparison_exp
  language: String_comparison_exp
  media: String_comparison_exp
  published: Boolean_comparison_exp
}

"""aggregate max on columns"""
type uf_languages_with_bible_portions_max_fields {
  id: bigint
  info: String
  language: String
  media: String
}

"""aggregate min on columns"""
type uf_languages_with_bible_portions_min_fields {
  id: bigint
  info: String
  language: String
  media: String
}

"""
Ordering options when selecting data from "uf_languages_with_bible_portions".
"""
input uf_languages_with_bible_portions_order_by {
  id: order_by
  info: order_by
  language: order_by
  media: order_by
  published: order_by
}

"""
select columns of table "uf_languages_with_bible_portions"
"""
enum uf_languages_with_bible_portions_select_column {
  """column name"""
  id

  """column name"""
  info

  """column name"""
  language

  """column name"""
  media

  """column name"""
  published
}

"""aggregate stddev on columns"""
type uf_languages_with_bible_portions_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type uf_languages_with_bible_portions_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type uf_languages_with_bible_portions_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "uf_languages_with_bible_portions"
"""
input uf_languages_with_bible_portions_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uf_languages_with_bible_portions_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uf_languages_with_bible_portions_stream_cursor_value_input {
  id: bigint
  info: String
  language: String
  media: String
  published: Boolean
}

"""aggregate sum on columns"""
type uf_languages_with_bible_portions_sum_fields {
  id: bigint
}

"""aggregate var_pop on columns"""
type uf_languages_with_bible_portions_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type uf_languages_with_bible_portions_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type uf_languages_with_bible_portions_variance_fields {
  id: Float
}

"""
columns and relationships of "uf_languages_with_gospel_recording"
"""
type uf_languages_with_gospel_recording {
  id: bigint!
  info: String
  language: String
  media: String
  published: Boolean
}

"""
aggregated selection of "uf_languages_with_gospel_recording"
"""
type uf_languages_with_gospel_recording_aggregate {
  aggregate: uf_languages_with_gospel_recording_aggregate_fields
  nodes: [uf_languages_with_gospel_recording!]!
}

"""
aggregate fields of "uf_languages_with_gospel_recording"
"""
type uf_languages_with_gospel_recording_aggregate_fields {
  avg: uf_languages_with_gospel_recording_avg_fields
  count(columns: [uf_languages_with_gospel_recording_select_column!], distinct: Boolean): Int!
  max: uf_languages_with_gospel_recording_max_fields
  min: uf_languages_with_gospel_recording_min_fields
  stddev: uf_languages_with_gospel_recording_stddev_fields
  stddev_pop: uf_languages_with_gospel_recording_stddev_pop_fields
  stddev_samp: uf_languages_with_gospel_recording_stddev_samp_fields
  sum: uf_languages_with_gospel_recording_sum_fields
  var_pop: uf_languages_with_gospel_recording_var_pop_fields
  var_samp: uf_languages_with_gospel_recording_var_samp_fields
  variance: uf_languages_with_gospel_recording_variance_fields
}

"""aggregate avg on columns"""
type uf_languages_with_gospel_recording_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "uf_languages_with_gospel_recording". All fields are combined with a logical 'AND'.
"""
input uf_languages_with_gospel_recording_bool_exp {
  _and: [uf_languages_with_gospel_recording_bool_exp!]
  _not: uf_languages_with_gospel_recording_bool_exp
  _or: [uf_languages_with_gospel_recording_bool_exp!]
  id: bigint_comparison_exp
  info: String_comparison_exp
  language: String_comparison_exp
  media: String_comparison_exp
  published: Boolean_comparison_exp
}

"""aggregate max on columns"""
type uf_languages_with_gospel_recording_max_fields {
  id: bigint
  info: String
  language: String
  media: String
}

"""aggregate min on columns"""
type uf_languages_with_gospel_recording_min_fields {
  id: bigint
  info: String
  language: String
  media: String
}

"""
Ordering options when selecting data from "uf_languages_with_gospel_recording".
"""
input uf_languages_with_gospel_recording_order_by {
  id: order_by
  info: order_by
  language: order_by
  media: order_by
  published: order_by
}

"""
select columns of table "uf_languages_with_gospel_recording"
"""
enum uf_languages_with_gospel_recording_select_column {
  """column name"""
  id

  """column name"""
  info

  """column name"""
  language

  """column name"""
  media

  """column name"""
  published
}

"""aggregate stddev on columns"""
type uf_languages_with_gospel_recording_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type uf_languages_with_gospel_recording_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type uf_languages_with_gospel_recording_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "uf_languages_with_gospel_recording"
"""
input uf_languages_with_gospel_recording_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uf_languages_with_gospel_recording_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uf_languages_with_gospel_recording_stream_cursor_value_input {
  id: bigint
  info: String
  language: String
  media: String
  published: Boolean
}

"""aggregate sum on columns"""
type uf_languages_with_gospel_recording_sum_fields {
  id: bigint
}

"""aggregate var_pop on columns"""
type uf_languages_with_gospel_recording_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type uf_languages_with_gospel_recording_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type uf_languages_with_gospel_recording_variance_fields {
  id: Float
}

"""
columns and relationships of "uf_languages_with_jesus_film"
"""
type uf_languages_with_jesus_film {
  id: bigint!
  info: String
  language: String
  media: String
  published: Boolean
}

"""
aggregated selection of "uf_languages_with_jesus_film"
"""
type uf_languages_with_jesus_film_aggregate {
  aggregate: uf_languages_with_jesus_film_aggregate_fields
  nodes: [uf_languages_with_jesus_film!]!
}

"""
aggregate fields of "uf_languages_with_jesus_film"
"""
type uf_languages_with_jesus_film_aggregate_fields {
  avg: uf_languages_with_jesus_film_avg_fields
  count(columns: [uf_languages_with_jesus_film_select_column!], distinct: Boolean): Int!
  max: uf_languages_with_jesus_film_max_fields
  min: uf_languages_with_jesus_film_min_fields
  stddev: uf_languages_with_jesus_film_stddev_fields
  stddev_pop: uf_languages_with_jesus_film_stddev_pop_fields
  stddev_samp: uf_languages_with_jesus_film_stddev_samp_fields
  sum: uf_languages_with_jesus_film_sum_fields
  var_pop: uf_languages_with_jesus_film_var_pop_fields
  var_samp: uf_languages_with_jesus_film_var_samp_fields
  variance: uf_languages_with_jesus_film_variance_fields
}

"""aggregate avg on columns"""
type uf_languages_with_jesus_film_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "uf_languages_with_jesus_film". All fields are combined with a logical 'AND'.
"""
input uf_languages_with_jesus_film_bool_exp {
  _and: [uf_languages_with_jesus_film_bool_exp!]
  _not: uf_languages_with_jesus_film_bool_exp
  _or: [uf_languages_with_jesus_film_bool_exp!]
  id: bigint_comparison_exp
  info: String_comparison_exp
  language: String_comparison_exp
  media: String_comparison_exp
  published: Boolean_comparison_exp
}

"""aggregate max on columns"""
type uf_languages_with_jesus_film_max_fields {
  id: bigint
  info: String
  language: String
  media: String
}

"""aggregate min on columns"""
type uf_languages_with_jesus_film_min_fields {
  id: bigint
  info: String
  language: String
  media: String
}

"""
Ordering options when selecting data from "uf_languages_with_jesus_film".
"""
input uf_languages_with_jesus_film_order_by {
  id: order_by
  info: order_by
  language: order_by
  media: order_by
  published: order_by
}

"""
select columns of table "uf_languages_with_jesus_film"
"""
enum uf_languages_with_jesus_film_select_column {
  """column name"""
  id

  """column name"""
  info

  """column name"""
  language

  """column name"""
  media

  """column name"""
  published
}

"""aggregate stddev on columns"""
type uf_languages_with_jesus_film_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type uf_languages_with_jesus_film_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type uf_languages_with_jesus_film_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "uf_languages_with_jesus_film"
"""
input uf_languages_with_jesus_film_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uf_languages_with_jesus_film_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uf_languages_with_jesus_film_stream_cursor_value_input {
  id: bigint
  info: String
  language: String
  media: String
  published: Boolean
}

"""aggregate sum on columns"""
type uf_languages_with_jesus_film_sum_fields {
  id: bigint
}

"""aggregate var_pop on columns"""
type uf_languages_with_jesus_film_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type uf_languages_with_jesus_film_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type uf_languages_with_jesus_film_variance_fields {
  id: Float
}

"""
columns and relationships of "uf_languages_with_one_story_bible_stories"
"""
type uf_languages_with_one_story_bible_stories {
  id: bigint!
  info: String
  language: String
  media: String
  published: Boolean
}

"""
aggregated selection of "uf_languages_with_one_story_bible_stories"
"""
type uf_languages_with_one_story_bible_stories_aggregate {
  aggregate: uf_languages_with_one_story_bible_stories_aggregate_fields
  nodes: [uf_languages_with_one_story_bible_stories!]!
}

"""
aggregate fields of "uf_languages_with_one_story_bible_stories"
"""
type uf_languages_with_one_story_bible_stories_aggregate_fields {
  avg: uf_languages_with_one_story_bible_stories_avg_fields
  count(columns: [uf_languages_with_one_story_bible_stories_select_column!], distinct: Boolean): Int!
  max: uf_languages_with_one_story_bible_stories_max_fields
  min: uf_languages_with_one_story_bible_stories_min_fields
  stddev: uf_languages_with_one_story_bible_stories_stddev_fields
  stddev_pop: uf_languages_with_one_story_bible_stories_stddev_pop_fields
  stddev_samp: uf_languages_with_one_story_bible_stories_stddev_samp_fields
  sum: uf_languages_with_one_story_bible_stories_sum_fields
  var_pop: uf_languages_with_one_story_bible_stories_var_pop_fields
  var_samp: uf_languages_with_one_story_bible_stories_var_samp_fields
  variance: uf_languages_with_one_story_bible_stories_variance_fields
}

"""aggregate avg on columns"""
type uf_languages_with_one_story_bible_stories_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "uf_languages_with_one_story_bible_stories". All fields are combined with a logical 'AND'.
"""
input uf_languages_with_one_story_bible_stories_bool_exp {
  _and: [uf_languages_with_one_story_bible_stories_bool_exp!]
  _not: uf_languages_with_one_story_bible_stories_bool_exp
  _or: [uf_languages_with_one_story_bible_stories_bool_exp!]
  id: bigint_comparison_exp
  info: String_comparison_exp
  language: String_comparison_exp
  media: String_comparison_exp
  published: Boolean_comparison_exp
}

"""aggregate max on columns"""
type uf_languages_with_one_story_bible_stories_max_fields {
  id: bigint
  info: String
  language: String
  media: String
}

"""aggregate min on columns"""
type uf_languages_with_one_story_bible_stories_min_fields {
  id: bigint
  info: String
  language: String
  media: String
}

"""
Ordering options when selecting data from "uf_languages_with_one_story_bible_stories".
"""
input uf_languages_with_one_story_bible_stories_order_by {
  id: order_by
  info: order_by
  language: order_by
  media: order_by
  published: order_by
}

"""
select columns of table "uf_languages_with_one_story_bible_stories"
"""
enum uf_languages_with_one_story_bible_stories_select_column {
  """column name"""
  id

  """column name"""
  info

  """column name"""
  language

  """column name"""
  media

  """column name"""
  published
}

"""aggregate stddev on columns"""
type uf_languages_with_one_story_bible_stories_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type uf_languages_with_one_story_bible_stories_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type uf_languages_with_one_story_bible_stories_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "uf_languages_with_one_story_bible_stories"
"""
input uf_languages_with_one_story_bible_stories_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uf_languages_with_one_story_bible_stories_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uf_languages_with_one_story_bible_stories_stream_cursor_value_input {
  id: bigint
  info: String
  language: String
  media: String
  published: Boolean
}

"""aggregate sum on columns"""
type uf_languages_with_one_story_bible_stories_sum_fields {
  id: bigint
}

"""aggregate var_pop on columns"""
type uf_languages_with_one_story_bible_stories_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type uf_languages_with_one_story_bible_stories_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type uf_languages_with_one_story_bible_stories_variance_fields {
  id: Float
}

"""
columns and relationships of "uf_languages_with_open_bible_stories"
"""
type uf_languages_with_open_bible_stories {
  id: bigint!
  info: String
  language: String
  media: String
  published: Boolean
}

"""
aggregated selection of "uf_languages_with_open_bible_stories"
"""
type uf_languages_with_open_bible_stories_aggregate {
  aggregate: uf_languages_with_open_bible_stories_aggregate_fields
  nodes: [uf_languages_with_open_bible_stories!]!
}

"""
aggregate fields of "uf_languages_with_open_bible_stories"
"""
type uf_languages_with_open_bible_stories_aggregate_fields {
  avg: uf_languages_with_open_bible_stories_avg_fields
  count(columns: [uf_languages_with_open_bible_stories_select_column!], distinct: Boolean): Int!
  max: uf_languages_with_open_bible_stories_max_fields
  min: uf_languages_with_open_bible_stories_min_fields
  stddev: uf_languages_with_open_bible_stories_stddev_fields
  stddev_pop: uf_languages_with_open_bible_stories_stddev_pop_fields
  stddev_samp: uf_languages_with_open_bible_stories_stddev_samp_fields
  sum: uf_languages_with_open_bible_stories_sum_fields
  var_pop: uf_languages_with_open_bible_stories_var_pop_fields
  var_samp: uf_languages_with_open_bible_stories_var_samp_fields
  variance: uf_languages_with_open_bible_stories_variance_fields
}

"""aggregate avg on columns"""
type uf_languages_with_open_bible_stories_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "uf_languages_with_open_bible_stories". All fields are combined with a logical 'AND'.
"""
input uf_languages_with_open_bible_stories_bool_exp {
  _and: [uf_languages_with_open_bible_stories_bool_exp!]
  _not: uf_languages_with_open_bible_stories_bool_exp
  _or: [uf_languages_with_open_bible_stories_bool_exp!]
  id: bigint_comparison_exp
  info: String_comparison_exp
  language: String_comparison_exp
  media: String_comparison_exp
  published: Boolean_comparison_exp
}

"""aggregate max on columns"""
type uf_languages_with_open_bible_stories_max_fields {
  id: bigint
  info: String
  language: String
  media: String
}

"""aggregate min on columns"""
type uf_languages_with_open_bible_stories_min_fields {
  id: bigint
  info: String
  language: String
  media: String
}

"""
Ordering options when selecting data from "uf_languages_with_open_bible_stories".
"""
input uf_languages_with_open_bible_stories_order_by {
  id: order_by
  info: order_by
  language: order_by
  media: order_by
  published: order_by
}

"""
select columns of table "uf_languages_with_open_bible_stories"
"""
enum uf_languages_with_open_bible_stories_select_column {
  """column name"""
  id

  """column name"""
  info

  """column name"""
  language

  """column name"""
  media

  """column name"""
  published
}

"""aggregate stddev on columns"""
type uf_languages_with_open_bible_stories_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type uf_languages_with_open_bible_stories_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type uf_languages_with_open_bible_stories_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "uf_languages_with_open_bible_stories"
"""
input uf_languages_with_open_bible_stories_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uf_languages_with_open_bible_stories_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uf_languages_with_open_bible_stories_stream_cursor_value_input {
  id: bigint
  info: String
  language: String
  media: String
  published: Boolean
}

"""aggregate sum on columns"""
type uf_languages_with_open_bible_stories_sum_fields {
  id: bigint
}

"""aggregate var_pop on columns"""
type uf_languages_with_open_bible_stories_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type uf_languages_with_open_bible_stories_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type uf_languages_with_open_bible_stories_variance_fields {
  id: Float
}

"""
columns and relationships of "uf_languages_with_radio_broadcast"
"""
type uf_languages_with_radio_broadcast {
  id: bigint!
  info: String
  language: String
  media: String
  published: Boolean
}

"""
aggregated selection of "uf_languages_with_radio_broadcast"
"""
type uf_languages_with_radio_broadcast_aggregate {
  aggregate: uf_languages_with_radio_broadcast_aggregate_fields
  nodes: [uf_languages_with_radio_broadcast!]!
}

"""
aggregate fields of "uf_languages_with_radio_broadcast"
"""
type uf_languages_with_radio_broadcast_aggregate_fields {
  avg: uf_languages_with_radio_broadcast_avg_fields
  count(columns: [uf_languages_with_radio_broadcast_select_column!], distinct: Boolean): Int!
  max: uf_languages_with_radio_broadcast_max_fields
  min: uf_languages_with_radio_broadcast_min_fields
  stddev: uf_languages_with_radio_broadcast_stddev_fields
  stddev_pop: uf_languages_with_radio_broadcast_stddev_pop_fields
  stddev_samp: uf_languages_with_radio_broadcast_stddev_samp_fields
  sum: uf_languages_with_radio_broadcast_sum_fields
  var_pop: uf_languages_with_radio_broadcast_var_pop_fields
  var_samp: uf_languages_with_radio_broadcast_var_samp_fields
  variance: uf_languages_with_radio_broadcast_variance_fields
}

"""aggregate avg on columns"""
type uf_languages_with_radio_broadcast_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "uf_languages_with_radio_broadcast". All fields are combined with a logical 'AND'.
"""
input uf_languages_with_radio_broadcast_bool_exp {
  _and: [uf_languages_with_radio_broadcast_bool_exp!]
  _not: uf_languages_with_radio_broadcast_bool_exp
  _or: [uf_languages_with_radio_broadcast_bool_exp!]
  id: bigint_comparison_exp
  info: String_comparison_exp
  language: String_comparison_exp
  media: String_comparison_exp
  published: Boolean_comparison_exp
}

"""aggregate max on columns"""
type uf_languages_with_radio_broadcast_max_fields {
  id: bigint
  info: String
  language: String
  media: String
}

"""aggregate min on columns"""
type uf_languages_with_radio_broadcast_min_fields {
  id: bigint
  info: String
  language: String
  media: String
}

"""
Ordering options when selecting data from "uf_languages_with_radio_broadcast".
"""
input uf_languages_with_radio_broadcast_order_by {
  id: order_by
  info: order_by
  language: order_by
  media: order_by
  published: order_by
}

"""
select columns of table "uf_languages_with_radio_broadcast"
"""
enum uf_languages_with_radio_broadcast_select_column {
  """column name"""
  id

  """column name"""
  info

  """column name"""
  language

  """column name"""
  media

  """column name"""
  published
}

"""aggregate stddev on columns"""
type uf_languages_with_radio_broadcast_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type uf_languages_with_radio_broadcast_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type uf_languages_with_radio_broadcast_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "uf_languages_with_radio_broadcast"
"""
input uf_languages_with_radio_broadcast_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uf_languages_with_radio_broadcast_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uf_languages_with_radio_broadcast_stream_cursor_value_input {
  id: bigint
  info: String
  language: String
  media: String
  published: Boolean
}

"""aggregate sum on columns"""
type uf_languages_with_radio_broadcast_sum_fields {
  id: bigint
}

"""aggregate var_pop on columns"""
type uf_languages_with_radio_broadcast_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type uf_languages_with_radio_broadcast_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type uf_languages_with_radio_broadcast_variance_fields {
  id: Float
}

"""
columns and relationships of "uf_networks"
"""
type uf_networks {
  countries: String
  id: bigint!
  languages: String
  network: String
}

"""
aggregated selection of "uf_networks"
"""
type uf_networks_aggregate {
  aggregate: uf_networks_aggregate_fields
  nodes: [uf_networks!]!
}

"""
aggregate fields of "uf_networks"
"""
type uf_networks_aggregate_fields {
  avg: uf_networks_avg_fields
  count(columns: [uf_networks_select_column!], distinct: Boolean): Int!
  max: uf_networks_max_fields
  min: uf_networks_min_fields
  stddev: uf_networks_stddev_fields
  stddev_pop: uf_networks_stddev_pop_fields
  stddev_samp: uf_networks_stddev_samp_fields
  sum: uf_networks_sum_fields
  var_pop: uf_networks_var_pop_fields
  var_samp: uf_networks_var_samp_fields
  variance: uf_networks_variance_fields
}

"""aggregate avg on columns"""
type uf_networks_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "uf_networks". All fields are combined with a logical 'AND'.
"""
input uf_networks_bool_exp {
  _and: [uf_networks_bool_exp!]
  _not: uf_networks_bool_exp
  _or: [uf_networks_bool_exp!]
  countries: String_comparison_exp
  id: bigint_comparison_exp
  languages: String_comparison_exp
  network: String_comparison_exp
}

"""aggregate max on columns"""
type uf_networks_max_fields {
  countries: String
  id: bigint
  languages: String
  network: String
}

"""aggregate min on columns"""
type uf_networks_min_fields {
  countries: String
  id: bigint
  languages: String
  network: String
}

"""Ordering options when selecting data from "uf_networks"."""
input uf_networks_order_by {
  countries: order_by
  id: order_by
  languages: order_by
  network: order_by
}

"""
select columns of table "uf_networks"
"""
enum uf_networks_select_column {
  """column name"""
  countries

  """column name"""
  id

  """column name"""
  languages

  """column name"""
  network
}

"""aggregate stddev on columns"""
type uf_networks_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type uf_networks_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type uf_networks_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "uf_networks"
"""
input uf_networks_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: uf_networks_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input uf_networks_stream_cursor_value_input {
  countries: String
  id: bigint
  languages: String
  network: String
}

"""aggregate sum on columns"""
type uf_networks_sum_fields {
  id: bigint
}

"""aggregate var_pop on columns"""
type uf_networks_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type uf_networks_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type uf_networks_variance_fields {
  id: Float
}

